current version
===============

examples:
- added small pricer example
- updated example code (s.t. it compiles again)

interface:
- new method SCIPgetCuts()
- callback method CONSSEPA of constraint handler was split into two methods CONSSEPALP and CONSSEPASOL
- replaced method SCIPconshdlrWasSeparationDelayed() by two methods SCIPconshdlrWasLPSeparationDelayed()
  and SCIPconshdlrWasSolSeparationDelayed()
- callback method SEPAEXEC of separator was split into two methods SEPAEXECLP and SEPAEXECSOL
- replaced method SCIPsepaWasDelayed() by SCIPsepaWasLPDelayed() and SCIPsepaWasSolDelayed()
- additional parameter "sol" for methods SCIPaddCut(), SCIPgetCutEfficacy(), and SCIPisCutEfficacious()
- additional parameter "sol" for method SCIPseparateKnapsackCover()
- new methods SCIPsepaGetNConssFound() and SCIPsepaGetNDomredsFound()
- new methods SCIPgetVarConflictScore(), and SCIPgetVarConflictScoreCurrentRun()
- new method SCIPvarSetData()
- new method SCIPcreateInvalidSol()
- primal solutions may now contain values marked to be invalid (value is SCIP_INVALID), which means that the value
  is unknown; invalid values don't contribute to the objective value of the solution; a solution with invalid values
  can not be feasible
- new method SCIPgetNConflictClausesFoundNode()
- new methods SCIPvarSetDelorigData(), SCIPvarSetTransData(), and SCIPvarSetDeltransData()
- new method SCIPvarHasBinaryImplic()

plugins:
- new presolver "implics" to find bound changes and aggregations out of the implication graph
- logic or constraint handler now adds implications on clauses with 2 literals to the implication graph
- and/or constraint handlers now add implications to the implication graph
- xor constraint handler now uses stronger LP relaxation without auxiliary variable for xor constraint with 2 operands
- modified probing order in probing presolver
- LP file reader now accepts the keyword "Integer" for defining the start of the integer variables section
- added preliminary version of "intdiving" heuristic (disabled in default settings)
- slightly modified restartdfs node selector
- added crossover heuristic

parameters:
- modified meaning of parameter presolving/probing/maxtotaluseless
- new parameter branching/inference/conflictweight
- heuristics with freq = 0 and freqofs > 0 are now called in depth level freqofs instead of being called in the root node
- added some parameters in local branching and RINS heuristic

features:
- changed handling of added constraints in separation calls
- modified bookkeeping of locally added and disabled and constraints such that the order of enabling and disabling
  constraints stays the same
- improved performance of the priority queue in conflict analysis

Makefile:
- included version number in binary file name

fixed bugs:
- fixed bug in ZIMPL model reader with wrong chdir, if .zpl file is in current directory
- fixed bug in LP file reader with signed values without space between sign and value (e.g. "+2x" instead of "+ 2x")
- fixed various bugs in LP file reader
- also removed history_length, if NO_REMOVE_HISTORY is defined to support older versions of the readline library
- removed bug in implication addition
- fixed wrong assert with implications that imply a fixed variable
- fixed numerics in check method of linear constraint handler
- hopefully fixed bug with wrong path slash '/' under Windows
- fixed numerics in probing and linear constraint handler (rentacar was detected to be infeasible in presolving)
- fixed bug with calling heuristics in depths smaller than their frequency offset
- fixed bug with aggregating fixed variables
- fixed bugs in local branching and RINS heuristic
- fixed bug in LP file reader with explicit zero coefficients
- fixed bug in transitive implication addition

known bugs:
- if one uses column generation and restarts, a solution that contains variables that are only present in the transformed
  problem (i.e., variables that were generated by a pricer) is not pulled back into the original space correctly, since
  the priced variables have no original counterpart


SCIP version 0.80
=================

interface:
- MAJOR CHANGE:
  preceeded all data types with "SCIP_" - you may use shell script reptypes_scip.sh to rename the SCIP data types in
  your own source code (But use with care! Create a backup copy of your source first!)
- additional parameter "validnode" for SCIPaddConsLocal() and SCIPaddConsNode()
- new method SCIPgetNConflictClausesApplied()
- new method SCIPdelVar()
- new method SCIPgetVarStrongbranchLPAge()
- new method SCIPgetNConflictClausesApplied()
- new event type SCIP_EVENTTYPE_VARDELETED
- new method SCIPconsGetValidDepth()
- new method SCIPhashtableExists()
- method SCIPhashtableRemove() can now also be called, if the element does not exist in the table
- new method SCIPhashmapExists()
- method SCIPhashmapRemove() can now also be called, if the element does not exist in the map
- new method SCIPvarIsTransformedOrigvar()
- new method SCIPvarIsDeleted()
- new callback parameter "validnode" for the CONFLICTEXEC method of conflict handlers, which should be passed to
  SCIPaddConsNode()
- new method SCIPnodeGetNumber()
- new method SCIPsolveProbingLP() to solve the LP in a probing node (enables mixing of propagation and LP solving
  for diving heuristics)
- new method SCIProwGetDualfarkas()
- new method SCIPgetCurrentNode()
- new method SCIPinterruptSolve()
- new file i/o methods SCIPfopen(), SCIPfclose(), SCIPfprintf(), ... that operate on the data type SCIPFILE;
  these methods automatically use zlib methods if the zlib is enabled
- additional parameter "branchdir" for SCIPbranchVar()
- replaced method SCIPmessage() by SCIPverbMessage() with additional parameter "file"
- new methods SCIPerrorMessage(), SCIPwarningMessage(), SCIPdialogMessage(), and SCIPinfoMessage()
- new methods SCIPsetMessagehdlr(), SCIPsetDefaultMessagehdlr(), and SCIPgetMessagehdlr()
- new method SCIPpropagateProbingImplications()
- new methods SCIPvarGetNCliques(), SCIPvarGetCliques(), SCIPvarsHaveCommonClique(), SCIPvarHasImplic()
- new methods SCIPcliqueGetNVars(), SCIPcliqueGetVars(), SCIPcliqueGetValues(), SCIPcliqueGetId()
- new methods SCIPaddClique(), SCIPcalcCliquePartition()
- new event SCIP_EVENTTYPE_IMPLADDED
- new method SCIPgetLPI() which makes all methods in scip/lpi.h available to the user
- put block memory shell and tclique algorithm into separate subdirectories
- new parameter "duringlploop" of SCIPincludeHeur() - heuristics can now run during the price-and-cut loop at a node
- new methods SCIPgetRandomInt() and SCIPgetRandomReal()
- new method SCIPstrtok()
- new methods SCIPsetConsInitial(), SCIPsetConsSeparated(), SCIPsetConsEnforced(), SCIPsetConsChecked(),
  SCIPsetConsPropagated(), SCIPsetConsLocal(), SCIPsetConsDynamic(), SCIPsetConsRemoveable()
- new method SCIPheurGetNBestSolsFound()
- new event types SCIP_EVENTTYPE_GLBCHANGED and SCIP_EVENTTYPE_GUBCHANGED

plugins:
- added command "write solution" to default dialog
- changed restart dfs nodeselector to sort leaves by node number instead of node depth to aviod jumping around in the
  search tree after a restart was applied and the current dive ended due to infeasibility
- removed "objfeaspump" heuristic, because the functionality can be achieved by using the "feaspump" heuristic
- diving heuristics are now applying propagation after each bound change
- new primal heuristic "octane"
- slightly changed feaspump heuristic, s.t. after finding a new best solution the target integral solution is modified
  randomly
- new method SCIPgetDualfarkasLinear() of linear constraint handler
- new method SCIPgetDualfarkasLogicor() of logicor constraint handler
- new method SCIPgetDualfarkasSetppc() of setppc constraint handler
- new method SCIPgetDualsolKnapsack() of knapsack constraint handler
- new method SCIPgetDualfarkasKnapsack() of knapsack constraint handler
- new method SCIPgetDualsolVarbound() of varbound constraint handler
- new method SCIPgetDualfarkasVarbound() of varbound constraint handler
- new Message Handler plugin
- added commands "write problem" and "write transproblem" to default dialog
- modified probing presolver to not add implications that are already included in the implication graph and clique table
- added file reader for LP format

parameters:
- replaced parameter presolving/restartbdchgs with parameters presolving/maxrestarts and presolving/restartfac
- new parameter conflict/maxclauses
- new parameter conflict/allowlocal
- new parameter branching/fullstrong/reevalage
- changed default values of heuristics/*/maxdiveavgquot and heuristics/*/maxdiveavgquotnosol to 0
- additional setting SCIP_VERBLEVEL_DIALOG in display/verblevel parameter
- additional LP pricing setting "partial"
- parameters constraints/agelimit and constraints/obsoleteage now iterprete the value 0 as a dynamic setting
- changed default values of constraints/agelimit and constraints/obsoleteage to 0
- changed default values of heuristics/objpscostdiving/maxsols and heuristics/rootsoldiving/maxsols to -1
- new parameter constraints/knapsack/disaggregation
- changed default value of separating/strongcg/maxroundsroot to 20
- changed default value of separating/cmir/maxroundsroot to 10
- new parameters separating/cmir/maxfails, separating/cmir/maxfailsroot and separating/cmir/trynegscaling
- number of fractional variables included in parameter separating/maxstallrounds
- changed default value of separating/maxstallrounds to 5
- new parameter presolving/probing/maxtotaluseless
- changed default value of presolving/probing/maxfixings to 50
- changed default parameter values to MIP settings:
  - conflict/useprop = FALSE
  - conflict/usepseudo = FALSE
  - display/verblevel = 4
  - separating/poolfreq = 0
  - constraints/linear/sepafreq = 0
  - constraints/and/sepafreq = 0
  - constraints/conjunction/sepafreq = 0
  - constraints/knapsack/sepafreq = 0
  - constraints/knapsack/sepacardfreq = 0
  - constraints/logicor/sepafreq = 0
  - constraints/or/sepafreq = 0
  - constraints/setppc/sepafreq = 0
  - constraints/varbound/sepafreq = 0
  - constraints/xor/sepafreq = 0
  - separating/clique/freq = 0
  - separating/cmir/freq = 0
  - separating/gomory/freq = 0
  - separating/impliedbounds/freq = 0
  - separating/strongcg/freq = 0
- replaced parameter constraints/linear/maxpresolaggrrounds with constraints/linear/maxpresolpairrounds
- changed default value of constraints/linear/maxaggrnormscale to 0.0, which means to not apply aggregation

features:
- reactivated multiaggregation in cons_linear.c on binary variables again (possible due to bug fix below)
- introduced subversion string
- adding variable bounds automatically adds the corresponding implication
- conflict clauses are now collected in a conflict store, redundant clauses are eliminated, and only the best
  "conflict/maxclauses" clauses are added permanently to the problem; the remaining clauses are only added
  temporarily, if they can be used for repropagation
- improved debugging for infeasible cuts and propagations, given a primal feasible solution
- slightly changed LP resolving loop in conflict analysis
- diving heuristics now apply propagation at each step
- if CPLEX returns that the LP exceeds the bound and if no additional LP solves are allowed in conflict analysis,
  we have to perform one additional simplex iteration to get the dual solution that actually violates the objective
  limit
- modified the influence of the depth level in conflict analysis
- new event type SCIP_EVENTTYPE_PRESOLVEROUND
- added zlib support
- replaced all abort() calls by SCIPABORT(); this is defined in def.h to be assert(FALSE)
- modified the Makefile to accept an additional parameter VERBOSE={true,false}
- improved knapsack cover separation
- changed linear constraint presolving s.t. redundant sides are not removed if constraint is an equality
- incorporated clique and implication information in knapsack constraint presolving
- improved performance of c-MIR separator
- cut pool is now also separated in root node (to find cuts again that were removed from the LP due to aging)
- improved preprocessing of variable bounds constraints
- removed transitive clique generation, because this produces way too many cliques
- improved preprocessing abort criteria
- added flags READLINE=true/false, ZLIB=true/false, ZIMPL=true/false to Makefile
- added possibility to disable certain features by using "make USRFLAGS=-DNO_REMOVE_HISTORY",
  "make USRFLAGS=-DNO_SIGACTION", "make USRFLAGS=-DNO_RAND_R", or "make USRFLAGS=-DNO_STRTOK_R"
- linear constraint handler now catches events of variables after the problem was completely transformed in order
  to avoid the whole bunch of LOCKSCHANGED events that are generated at problem transformation stage
- added redundancy detection for pairs of constraints in setppc constraint handler

fixed bugs:
- LP primal feasibility for bounds is now defined as absolute measure (was relative to the bound before);
  this fixes a bug (see alu8_9.mps), that an LP with an integral variable fixed to a large value yields an
  accepted solution with that variable slightly different than the fixed value; the integrality feasibility
  condition is measured with absolute differences, which leads to the fixed integer variable being fractional;
  this leads to an error if branching is performed on this variable
- locally fixed variables are no longer used as branching candidates even if their LP solution value is
  fractional (due to numerical reasons, see above)
- fixed minor bugs in debug code of primal.c and sol.c
- variables that are being multiaggregated are now automatically removed from all other variables' variable bound
  and implication arrays; this fixes bugs with methods, that rely on the fact, that the entries in the variable
  bound and implication arrays are active variables only
- aggregations are now always performed in a way, such that the variable of more general type is aggregated
  (with type generality being cont > implint > int > bin); in this way, a binary variable's representant is
  always binary (which was not the case before, and resulted in a bug in SCIPgetBinvarRepresentative())
- removed wrong asserts from lpi_cpx.c
- global bound changes now lead to the removal of redundant implications (such that the asserts in sepa_implbounds.c
  are now correct)
- due to usage of variable bounds, SCIPcalcMIR() may return LOOSE variables in the cut -> modified sepa_cmir.c,
  sepa_gomory.c, and sepa_strongcg.c to use SCIPcreateEmptyRow() and SCIPaddVarsToRow() instead of SCIPcreateRow()
  which only works for COLs
- removed bug in presol_probing.c: the vars of the sorted variables array have to be captured
- fixed bug in the output of solutions with priced variables
- fixed bug in propagation with parameters prop_maxrounds and prop_maxroundsroot
- removed wrong assertion in varAddImplic()
- conflict analysis can now handle errors in LP solving calls
- fixed bug in linear constraint handler with variables fixed to infinity
- fixed bug with potential infinite loop if a separator is delayed and the LP is infeasible
- fixed numerical bug in pseudo objective propagator with only slightly tightened bounds
- fixed bug with constraint handlers that can only enforce their constraints by adding cuts, but the maximal number of
  cuts to separate is set to 0; now, cuts that are generated in the constraint enforcement are used in any case
- removed bug in SCIPvarAddVlb() and SCIPvarAddVub() with fractional vlb/vubcoefs
- removed bug that an LP might be declared to be solved even if it was marked erroneous due to numerical problems
- fixed bug with redundant self implications that wrongly lead to the detection of infeasibility
- fixed bug that primal or dual rays might not be available because the wrong solver was used
- included message.o in LPI library, s.t. one can link this library indepentent of SCIP
- fixed bug that if diving heuristic that changes the objective values finds a solution, the cutoff is reinstalled in
  the LP solver (although the objective value has no meaning due to the objective function modification)
- fixed bug in knapsack constraint presolving with tightening coefficients and capacity
- fixed bug with modifiable constraints in linear constraint handler preprocessing
- fixed bug in clique separator that reduced performance
- increased performance of clique separator by allowing only a certain number of zero-weighted fill ins
- fixed bug in linear constraint handler that global activities are not updated after global bound changes


SCIP version 0.79
=================

interface:
- constraint handler callback methods CONSLOCK and CONSUNLOCK are replaced by a single method CONSLOCK with the
  number of locks being positive or negative
- methods SCIPvarLock(), SCIPvarLockDown(), SCIPvarLockUp(), SCIPvarLockBoth(), SCIPvarUnlock(), SCIPvarUnlockDown(),
  SCIPvarUnlockUp(), and SCIPvarUnlockBoth() are replaced by SCIPaddVarLocks() which returns a RETCODE
- methods SCIPvarLockDownCons(), SCIPvarLockUpCons(), SCIPvarUnlockDownCons(), and SCIPvarUnlockUpCons() are
  replaced by SCIPlockVarCons() and SCIPunlockVarCons() which return a RETCODE
- methods SCIPlockConsVars() and SCIPunlockConsVars() replaced with method SCIPaddConsLocks()
- additional parameter "maxproprounds" in SCIPpropagateProbing()
- changed memory interface (see memory.h), MEMHDR is now called BLKMEM
- additional parameter "aggregated" in SCIPmultiaggregateVars()
- new method SCIPgetObjNorm()
- new methods SCIPvarGetLbOriginal() and SCIPvarGetUbOriginal() for original problem variables
- methods SCIPvarGetLbGlobal(), SCIPvarGetUbGlobal(), SCIPvarGetLbLocal(), and SCIPvarGetUbLocal() now return the
  corresponding values of the transformed problem or current subproblem  even for original problem variables
- removed method SCIPsolGetObj() - use SCIPgetSolOrigObj() or SCIPgetSolTransObj() instead
- additional parameter "checkbounds" for SCIPtrySol(), SCIPtrySolFree(), SCIPcheckSol()
- new method SCIPcreateOrigSol()
- new method SCIPwriteImplicationConflictGraph()
- new callback methods INITSOL and EXITSOL for variable pricers, primal heuristics, conflict handlers,
  relaxators, separators, propagators, event handlers, node selectors, and display columns
- new parameter delay for presolvers
- new parameter delaypresol for constraint handlers
- new possible result SCIP_DELAYED for EXEC method of separators, presolvers, and propagators,
  and SEPA, PROP, and PRESOL methods of constraint handlers
- new methods SCIPsepaIsDelayed(), SCIPsepaWasDelayed(), SCIPpropIsDelayed(), SCIPpropWasDelayed(), SCIPpresolIsDelayed(),
  SCIPpresolWasDelayed(), SCIPconshdlrIsSeparationDelayed(), SCIPconshdlrIsPropagationDelayed(), 
  SCIPconshdlrIsPresolvingDelayed(), SCIPconshdlrWasSeparationDelayed(), SCIPconshdlrWasPropagationDelayed(), and
  SCIPconshdlrWasPresolvingDelayed()
- new method SCIPinProbing()
- new method SCIPgetProbName()
- source code was moved into subdirectories: replace includes #include "scip.h" by #include "scip/scip.h" and
  #include "objscip.h" by #include "objscip/objscip.h";
  This should allow a user to have include files of the same name as the ones of SCIP, e.g. "tree.h" or "var.h".
- method SCIPreadProb() does not free the current problem - this is done in SCIPcreateProb() now, which is usually
  called by a problem reader; in this way, a reader can generate "extra information" for the current problem, s.t.
  the full problem information can be distributed to different files read by different readers
- methods SCIPgetVarStrongbranch() and SCIPgetVarStrongbranchLast() now have two additional parameters that can
  be used to check, whether the returned values are correct dual bounds
- new method SCIPisLPSolBasic() to check, whether the current LP solution is basic (i.e. due to a simplex algorithm
  or barrier with crossover)
- event handlers are now available as C++ wrapper class
- method SCIPconshdlrGetNConss() is replaced by SCIPconshdlrGetNActiveConss() (returning the number of active constraints);
  method SCIPconshdlrGetNConss() does now return the total number of existing constraints, active and inactive
- method SCIPconshdlrGetStartNConss() is now called SCIPconshdlrGetStartNActiveConss()
- method SCIPconshdlrGetMaxNConss() is now called SCIPconshdlrGetMaxNActiveConss()
- new flag "afterrelaxation" for primal heuristics
- method SCIPdisableConsNode() is replaced by SCIPdelConsNode()
- method SCIPdisableConsLocal() is replaced by SCIPdelConsLocal()
- new method SCIPenableCons()
- new method SCIPdisableCons()
- new method SCIPenableConsSeparation()
- new method SCIPdisableConsSeparation()
- new method SCIPconsIsSeparationEnabled()
- added new parameter "dynamic" to SCIPcreateCons() and all plugin methods SCIPcreateCons...()
- callback method CONFLICTEXEC of conflict handlers receive additional parameters "dynamic" and "removeable"
- new methods SCIPgetAvgPseudocost(), SCIPgetAvgPseudocostCurrentRun(), SCIPgetAvgPseudocostCount(),
  SCIPgetAvgPseudocostCountCurrentRun(), SCIPgetAvgInferences(), SCIPgetAvgInferencesCurrentRun(),
  SCIPgetAvgCutoffs(), SCIPgetAvgCutoffsCurrentRun(), 
- new methods SCIPgetNPrimalLPs(), SCIPgetNPrimalLPIterations(), SCIPgetNDualLPs(), SCIPgetNDualLPIterations(),
  SCIPgetNBarrierLPs(), SCIPgetNBarrierLPIterations()
- new methods SCIPgetNPrimalResolveLPs(), SCIPgetNPrimalResolveLPIterations(),
  SCIPgetNDualResolveLPs(), SCIPgetNDualResolveLPIterations()
- new methods SCIPgetVarNStrongbranchs(), SCIPcolGetNStrongbranchs()
- new methods SCIPfindSimpleRational(), SCIPselectSimpleValue()
- new method SCIPvarGetImplIds()
- methods SCIPvarGetProbvar(), SCIPvarGetProbvarBinary() now return the fixed or multi-aggregated variable instead
  of returning NULL or aborting with an error message; in SCIPvarGetProbvarBinary(), the fixing of a fixed variable
  does not influence the negation status anymore
- method SCIPvarGetProbvarBound() returns the multi-aggregated variable instead of aborting with an error message
- method SCIPvarGetProbvarSum() does not set *var to NULL for fixed variables anymore; it may also return a
  multi-aggregated variable instead of aborting with an error message
- method SCIPgetBinvarRepresentative() now returns the fixed or multi-aggregated variable instead of returning
  NULL or aborting with an error message
- new method SCIPvarGetOrigvarSum()
- method SCIPdispDecimal() is replaced by SCIPdispInt() and SCIPdispLongint()

plugins:
- new implementation of the feasibility pump heuristic by Timo Berthold (replaces old implementation);
  old implementation is now called "objfeaspump"; parameter names have been changed accordingly
- diving heuristics now compare their number of LP iterations with the number of node LP iterations instead of the
  total number (including their own) LP iterations
- new plugin: probing presolver
- new plugin: clique separator for clique cuts with at least 3 elements
- changed implementation of reliability value calculation in reliability branching; slightly modified influence
  of maximal total number of strong branching LP iterations in reliability branching
- changed implementation of maximal strong branching iterations calculation in reliability branching
- modified the automatic objfactor setting of feaspump heuristic to let the objective function have stronger influence
- changed implementation of automatic minplungedepth and maxplungedepth calculation in bfs node selector
- new plugin: implied bound cuts separator
- during probing, propagation of bounds is now always performed in linear constraint handler, ignoring the
  parameter "tightenboundsfreq"
- new implementation of the clique graph construction method in clique separator

parameters:
- new parameters lp/cleanupcolsroot and lp/cleanuprowsroot to distinguish cleanup settings between root node and other
  nodes
- new parameters heuristics/fixandinfer/proprounds and heuristics/fixandinfer/minfixings
- default frequency offset of fracdiving heuristic changed to 3
- default frequency offset of (new) feaspump heuristic changed to 0
- default frequency offset of objfeaspump heuristic changed to 8
- changed default priority of primal heuristics
- renamed parameter limits/sol to limits/solutions
- changed default check priority of knapsack constraint handler to -600000
- new parameters separating/.../delay
- new parameters presolving/.../delay
- new parameters propagating/.../delay
- new parameters constraints/.../delaysepa
- new parameters constraints/.../delayprop
- new parameters constraints/.../delaypresol
- changed default priority of Gomory cut separator to -1000 (will now be called after constraint handlers!)
- changed default priority of strong CG cut separator to -2000
- changed default priority of cmir cut separator to -3000
- new parameters lp/initalgorithm and lp/resolvealgorithm for switching between simplex and barrier algorithm
- new parameter numerics/barrierconvtol to set the convergence tolerance in the barrier algorithm
- new parameter lp/pricing to set the pricing strategy used in the LP solver
- changed default of parameter lp/pricing to 's'teepest edge pricing
- new parameter lp/checkstability to disable stability check of LP solver's result code
- default parameter branching/relpscost/minreliable changed to 1.0
- default parameter branching/relpscost/maxlookahead changed to 8
- default parameter branching/relpscost/sbiterofs changed to 100000
- default parameter heuristics/coefdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/fracdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/guideddiving/maxlpiterquot changed to 0.05
- default parameter heuristics/linesearchdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/pscostdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/feaspump/freq changed to 20
- default parameter heuristics/objfeaspump/freq changed to 20
- default parameter heuristics/objpscostdiving/freq changed to 20
- default parameter heuristics/rootsoldiving/freq changed to 20
- new parameter conflict/dynamic
- new parameter conflict/removeable
- new parameter reading/mpsreader/dynamicconss
- new parameter reading/cnfreader/dynamicconss
- new parameter heuristics/coefdiving/maxlpiterofs
- new parameter heuristics/feaspump/maxlpiterofs
- new parameter heuristics/fracdiving/maxlpiterofs
- new parameter heuristics/guideddiving/maxlpiterofs
- new parameter heuristics/linesearchdiving/maxlpiterofs
- new parameter heuristics/objfeaspump/maxlpiterofs
- new parameter heuristics/objpscostdiving/maxlpiterofs
- new parameter heuristics/pscostdiving/maxlpiterofs
- new parameter heuristics/rootsoldiving/maxlpiterofs
- new parameter heuristics/feaspump/maxsols
- new parameter heuristics/objfeaspump/maxsols
- new parameter heuristics/objpscostdiving/maxsols
- new parameter heuristics/rootsoldiving/maxsols
- new parameter branching/scorefunc
- default parameter separating/clique/maxtreenodes changed to -1

features:
- aging and cleanup now only remove non-basic columns and basic rows, s.t. resolving can be applied with 0 simplex
  iterations
- calling SCIPaddCut() with forcecut=TRUE will add the cut to the LP even if it is redundant
- command line history in interactive shell now only stores "useful" commands
- probing is now also possible in presolving stage
- it is now possible to create subnodes in probing and use backtracking to undo probing changes
- it is now possible to interrupt and continue presolving
- bounds of variables are included in the feasibility checks for solutions
- support for barrier algorithm
- added TSP example in examples/TSP
- SCIPaddVarImplication() now also adds variable lower and upper bounds, if the implied variable is non-binary
- removed storing of dual norms in LPI state of CPLEX interface (too memory consuming)
- included debugging module to check whether cutting planes cut off the optimal solution
- if verblevel is at least NORMAL, an automatical check of the best solution is performed in the original problem,
  and an error message is displayed, if it violates an original constraint

fixed bugs:
- fixed bug in MPS file reader
- fixed bugs in separation store with single coefficient cuts that are converted into bound changes
- at least one cut per separation round is added to the LP to avoid cycling, even if the cut is redundant
- removed bug with applying reduced cost strengthening before pricing in all necessary variables
- negated variables must also be reset in SCIPvarInitSolve()
- removed bug with objective norm calculation and column variables not in the LP (pricing)
- removed conflict analysis of infeasible diving LP if pricing is activated
- removed bug in knapsack constraint handler with merging multiple items if more than two items of the same
  variable appear in the constraint
- fixed bug in SCIProwCalcIntegralScalar() with rows consisting of only continuous variables (appeared in
  gomory cut separator on miplib/dcmulti.mps)
- fixed documentation of CONSLOCK-method (missing parameter "scip" in SCIPaddVarLocks())
- included missing "objrelax.h" in includes of objscip.h
- fixed bug that presolving time is not counted to solving time, if presolving is called explicitly with SCIPpresolve()
- fixed bug where presolving fixings are counted even if the variable was already fixed
- fixed bug that CONSLOCK method of constraint handlers that don't need constraints is not called
- fixed bug that after a resolve and further preprocessing, existing primal solutions may get corrupted due to
  aggregations or fixings that are possible due to the primal bound (given by the best solution)
- fixeg bug in setppc constraint handler with pairs of aggregated variables in the same constraint
- removed bug with dual presolver, that declared a problem to be unbounded or infeasible, if it could fix a variable
  to infinity even if its objective value is zero
- fixed bug in knapsack constraint handler that fixed variables are sometimes not removed in presolving
- made conflict analysis available in presolving stage (for probing conflicts)
- removed bug in knapsack constraint handler with merging negated variables of equal weight at the end of the variables'
  array
- fixed bug with primal bound becoming wrong, if in a prior run the optimal solution was found and the cutoff bound was
  thereby reduced due to further domain propagation w.r.t. the objective function
- fixed bug with unresolved numerical troubles in LP that don't render the LP useless at the current node
- fixed bug in SCIPisObjIntegral()
- LP error on forced LP resolve (due to 0 unfixed integers) now leads to an error (instead of accepting the pseudo solution as feasible)
- fixed bug in SCIPprintError() with file == NULL
- fixed bug with globally deleting constraints, that have attached rows which are therefore not released in exitsol methods
- fixed bugs in intobj separator
- fixed bug in CPLEX LP interface with dual norms
- heuristic's display character is now only shown the first time, the new solution was found
- fixed bug that SCIPreadProb() doesn't discard the transformed problem
- fixed bug in cmir separator with empty rows
- fixed bug in linear constraint handler's knapsack relaxation separator
- fixed numerical bugs in rounding heuristic and rootsoldiving heuristic
- fixed bug in implied bound cut separator: only implications between binary variables were generated before
- fixed bug in linear constraint handler with eventdatas, if the original constraint has no variables
- fixed bug with wrong euclidean norm calculation of row, if multiple coefficients for the same variable are added
  and the sorting of the row was delayed with SCIProwDelaySort()
- fixed bug with adding implications: wrong insertion position, if only the lower bound change was present but not
  the upper bound change
- fixed bug in SCIPvarAddImplics() with wrong variable used in varAdjustBd()
- fixed bug in method reduced() of tclique_branch.c with sorting nodes in V


SCIP version 0.78
=================

interface:
- new method SCIPvarIsInLP()
- new methods SCIPgetLPColumnObjval() and SCIPgetLPLooseObjval()
- new method SCIPcalcIntegralScalar() with arbitrary array of Real values
- new plugin class for relaxators (external relaxations, that can be used in parallel with LP relaxations)
- if more than one result code applies to a plugin's execution, it should return the one that is higher in the
  call's documentation list
- new method SCIPaddCoefKnapsack() in knapsack constraint handler
- removed SCIPisFeasible(); use !SCIPisFeasNegative() instead
- methods SCIPisIntegral(), SCIPisFracIntegral(), SCIPfloor(), SCIPceil(), and SCIPfrac() don't use the
  feasibility tolerance anymore (default: 1e-06); instead, they are using epsilon (default: 1e-09);
  instead, for handling integrality of a variable "in feasibility tolerances", new methods SCIPisFeasIntegral(),
  SCIPisFeasFracIntegral(), SCIPfeasFloor(), SCIPfeasCeil(), and SCIPfeasFrac() should be used
- new method SCIPisScalingIntegral() to check, whether the scaling of a value would lead to an integral value,
  measured against epsilon which is also scaled by the same scalar
- new methods SCIPgetRealarrayMinIdx(), SCIPgetRealarrayMaxIdx(), SCIPgetIntarrayMinIdx(), SCIPgetIntarrayMaxIdx(),
  SCIPgetBoolarrayMinIdx(), SCIPgetBoolarrayMaxIdx(), SCIPgetPtrarrayMinIdx(), and SCIPgetPtrarrayMaxIdx()
- new methods SCIPbsortPtrInt(), and SCIPbsortPtrIntInt()
- in LPI, the semantics of SCIPlpiHasPrimalRay() and SCIPlpiHasDualRay() changed:
  methods return TRUE, if a ray exists and the solver can return it;
  new methods SCIPlpiExistsPrimalRay() and SCIPlpiExistsDualRay() check whether a ray exists without checking, if
  the solver knows and can return the ray
- new method SCIPvarWasFixedAtIndex()
- new method SCIPaddConflictBd()
- even in optimized mode, the simple functions that are implemented as defines in the include files exist in the library,
  s.t. one can include the include files without NDEBUG and use the optimized library
- new method SCIPprintMemoryDiagnostic()
- new methods SCIPfindObj...() and SCIPgetObj...() in C++ wrapper interface to get the corresponding plugin object
- new branching rule plugin methods INITSOL and EXITSOL

parameters:
- slightly changed the meaning of parameter presolving/abortfac: a value of 0 now means to abort presolving only
  after no more change has been found

features:
- changed SCIProwCalcIntegralScalar() to a slightly different algorithm
- improved knapsack relaxation in linear constraint handler separator to scale the constraint in order to get
  integral coefficients instead of just rounding down all coefficients
- improved presolving of linear constraint handler: aggregation of two constraints with equal coefficient vector
  into single constraint
- improved presolving of knapsack constraint handler: aggregation of equal or negated variables in same constraint
- priority of separators, propagators, and presolvers decide whether the plugin is called before the corresponding
  constraint handler methods or after: plugins with nonnegative priorities are called before, plugins with negative
  priorities are called after the constraint handlers

fixed bugs:
- removed bug in knapsack constraint handler that appears if a variable is fixed to zero in knapsack presolving,
  which triggers a variable of the same knapsack to be fixed to one due to aggregation
- fixed bugs in consdataSwitchWatchedVars() of "or" and "and" constraint handlers
- fixed bug in all-fullstrong branching with getting strong branching information for columns not in current LP
- assigning a value to a fixed variable in a solution with SCIPsetSolVal() does not return an error anymore, if the value
  is equal to the fixed value of the variable
- implemented missing case in solve.c with branching rules that add constraints
- solving loop is now immediately aborted, if a node on the active path is marked to be cut off
- removed bug in resolving an interrupted problem, after the last solved node was cut off
- removed bug with infinite solving loop if LP solving is turned off
- removed bug in knapsack presolver
- removed bug with aborted solving in root node (e.g. due to time limit) that is tagged to be restarted
- changed numerics for integrality check of coefficients (fixed bug with accumulated errors in rows s.t. the
  row's activity is no longer integral although the row is marked being integer)
- fixed bugs in constraint handlers (and, logicor, or, setppc, xor) with calling conflict analysis during presolving
- slightly changed numerics in linear constraint handler presolving to fix a bug with coefficients detected to be
  scaled to an integral value, that are not integral after scaling due to a large scalar that increased the integrality
  gap to a value larger than epsilon
- fixed wrong assertion in xor constraint handler with switching both watched variables to unwatched
- removed bug in SCIPisScalingIntegral()
- removed bugs with calling SCIPtightenVarLb(), SCIPtightenVarUb(), SCIPinferVarLbCons(), SCIPinferVarUbCons(),
  SCIPinferVarLbProp(), and SCIPinferVarUbProp() in PROBLEM stage
- fixed bug in presolving with wrong number of newly fixed/aggregated/... variables/bounds/... after a restart


SCIP version 0.77
=================

installation:
- the file names in the archive file are now preceeded with a directory "scip-<version>/"
- the compiler is now also represented in the LP solver library names
  (e.g. you have to rename the softlink "libcplex.linux.x86.a" to "libcplex.linux.x86.gnu.a")

interface:
- added methods SCIPgetVarsLogicor() and SCIPgetNVarsLogicor() in logic or constraint handler
- methode SCIPgetGap() and SCIPgetTransGap() now return infinity, if primal and dual bound have opposite sign
  (this removes the oddness with the gap increasing while the dual bound approaches zero)

parameters:
- lp/colagelimit and lp/rowagelimit may now be set to -1 to disable deletion of columns/rows due to aging

features:
- infeasible LPs in diving now produce conflict clauses (if LP conflict analysis is enabled)
- conflict analysis was slightly modified
- slightly changed aging strategy of logic or constraint handler

fixed bugs:
- removed bug in conflict analysis that appears if the conflict is only active at the current depth level
- missing SCIPlpiIsPrimalFeasible() and SCIPlpiIsDualFeasible() implemented in lpi_spx.cpp and lpi_spx121.cpp
- removed preprocessing of linear constraint pairs with modifiable constraints
- removed wrong assert "assert(eventfilter->len == 0 || eventfilter->eventmask != 0x00000000)" from event.c
- removed wrong assert in conflict analysis (appeared on analyzing diving LP conflicts with both bounds of a non-binary
  variable changed)


SCIP version 0.76
=================

interface:
- new method SCIPchgVarBranchDirection()
- new method SCIPvarGetBranchDirection()
- new possible result code SCIP_DELAYED for primal heuristics
- changed SCIPcatchVarEvent() and SCIPdropVarEvent()
- method SCIPstage() is now called SCIPgetStage()
- method SCIPprintStatus() is now called SCIPprintStage()
- new method SCIPgetStatus() returns the solution status
- new method SCIPprintStatus() outputs the solution status
  (beware, that the old SCIPprintStatus() method is now called SCIPprintStage())

plugins:
- new method SCIPgetActivityLinear() in linear constraint handler
- new method SCIPgetFeasibilityLinear() in linear constraint handler

parameters:
- new parameter separating/efficacynorm to choose between Euclidean, maximum, sum, and discrete norm
  in efficacy calculation
- changed default frequency offset of pscostdiving (heuristics/pscostdiving/freqofs) to 2,
  and frequency offset of fracdiving (heuristics/feaspump/freqofs) to 0 in order to not call pscostdiving
  in root node, where nearly all pseudo costs are uninitialized

features:
- creation of reconvergence clauses in conflict analysis
- first node of each plunging is not treated as plunging node w.r.t. calling primal heuristics
- improved performance of logic or constraint handler due to better watched variables handling

fixed bugs:
- removed bugs in CLP Solver interface
- SCIP returned "gap limit reached" even if the problem was solved to optimality, if the
  optimal solution was found at a node with lower bound equal to the global lower bound
- after conversion of the focus node into a junction (e.g. in case of numerical troubles while solving the node's LP),
  the child nodes got the wrong LP fork attached (the common LP fork of the old and new focus node instead of the
  old focus node's LP fork)
- bug reconvergence clauses in conflict analysis if bounds on non-binary variables were the reason for the fixing of
  the uip to create a reconvergence clause for
- wrong sub calls in SCIPvarGet...CurrentRun() for aggregated variables
- variables' conflict set counter was not reset when the problem was resolved again

known bugs (still not fixed):
- unbounded models lead to an error
- air04 and air05 return wrong optimal value (1 too large): possibly due to strong branching or setppc propagation?


SCIP version 0.75
=================
- started change log
