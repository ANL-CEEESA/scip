current version
===============

compiling:
- added in all make/make.* "GMP_FLAGS" and "GMP_LDFLAGS"
- new flag GMP with values ("auto", "true, and "false"); in case of "auto" the library gmp is linked if 
  ZIMPL is included
- modified makefiles to accept ZIMPLOPT and LPSOPT flags (with values "opt" or "dbg" and default being "opt"),
  and removed LPS=spxdbg and LPS=clpdbg
- added "make/make.project" as default make include for external projects using SCIP
- adapted all makefiles of the examples accordingly
- added possibility to compile shared libraries in makefiles (and added make/make.linux.x86.gnu.opt-shared)
- replaced <string> by <cstring> in all C++-interfaces to get 'strlen()' included (gcc-4.3 gave an error)

interface:
- new method SCIPconsGetPos()
- new parameters "extension" and "genericnames" in SCIPprintTransProblem() defining the 
  requested format or NULL for default CIP format and using generic names for the variables and constraints
  e.g, SCIPprintTransProblem(scip, NULL, NULL, TRUE) displays the transformed problem in CIP format with generic 
  variables and constraint names 
- new parameters "extension" and "genericnames" in SCIPprintOrigProblem() defining the 
  requested format or NULL for default CIP format and using generic names for the variables and constraints
  e.g, SCIPprintOrigProblem(scip, NULL, "lp", FALSE) displays the original problem in LP format with original 
  variables and constraint names 
- new callback method SCIP_DECL_READERWRITE(x) in type_reader.h; this method is called  
  to write a problem to file stream in the format the reader stands for;
  useful for writing the transformed problem in LP or MPS format
- new parameter "conshdlrname" in SCIPincludeLinconsUpgrade() 
- new method SCIPrepropagateNode() to mark a node for repropagation
- new method SCIPcount() (in cons_countsols.h) for counting all feasible solution of a given CIP
- new method SCIPcreateRootDialog() (in dialog_default.h) which creates a root dialog
- new method SCIPbsortInd()
- replaced sorting methods SCIPbsort...() by faster (quicksort/shellsort) algorithms SCIPsort...()
  Note that the order of the paramters has been changed to simplify the template code in sorttpl.c!
- expand sorttpl.c by some parameters
- added some downwards-sorting methods
- changed some names for sorting methods
- new parameter 'maxfrac' for SCIPcalcStrongCG()
- the parameter list of the method SCIPcheckSolOrig() (scip.h) has changed; the new advatage is,
  that SCIP can print the reason for a violation as for as the violated component supports this
- the parameter list of the method SCIPcheckCons() (scip.h) has changed; the new advatage is,
  that SCIP can print the reason for the violation of a constraint as for as the constraint handler supports that
- the interface method SCIP_DECL_CONSCHECK() has a new parameter "printreason"; if this comes in TRUE the constraint
  handler is ask to print for violated constraint a reason;
- the parameter list of the method scip_check() (objconshdlr.h) has an additional parameter "printreason" 
  see for explanation the previous point

features:
- the MPS reader is now able to write a problem in MPS format
- new method SCIPwriteOrigProblem(), e.g., 
  SCIPwriteOrigProblem(scip, "orig.lp", FALSE) prints the original problem in LP format in the file "orig.lp"
- new method SCIPwriteTransProblem(), e.g.,
  SCIPwriteOrigProblem(scip, NULL, FALSE) displays the transformed problem in CIP format 
- new method SCIPgetProbvarLinearSum()
- added SOS2 example
- extended TSP example
- the ZIMPL reader now understands SOS type 1 and 2 constraints
- the LP reader reads SOS constraints of type 1 and 2
- the MPS reader reads the SOS section (but cannot yet handle 'MARKERS')
- output of real values is now done with 15 digits after the decimal point
- new method SCIPgetResultantAnd() which returns the resultant variable of an "and" constraint 
- SCIP is now able to count all feasible solutions of a given CIP (SCIPcount() in cons_countsols.h)
- SCIP can now output a picture of the constraint matrix in PPM format.
- replaced some old sorting methods in cons_knapsack.c, heur_octane.c, sepa_flowcover.c and presol_probing.c through SCIPsort... interfaces, adjusted misc.{c,h} and pub_misc.h for these changes
- updated mmm.{test,solu}, mittelmann.{test,solu}, miplib3.solu, miplib.solu, shortmiplib.test and added mittelmann_current.test, mittelmann_old.test 
- LPI now has a function SCIPlpiGetSolverPointer() that returns a solver dependent pointer. This can be used to directly access the LP solver. 
  This should, of course, only be used by people that know exactly what they are doing.
- improved the performance of SCIPcalcMIR() and SCIPcalcStrongCG() by exploiting sparsity
- better branching in SOS1/SOS2 constraints

plugins:
- added first version of SOS type 1 constraint handler (cons_sos1.{c,h})
- added first version of SOS type 2 constraint handler (cons_sos2.{c,h})
- less aggressive scaling in linear constraint handler presolve to improve numerics
- added reader for pseudo-Boolean problems (reader_opb.{c,h})
- added first version of constraint handler cons_countsols.{c,h}
- tighter memory limits in knapsack presolve lifting procedure to avoid overly expensive presolving

parameters:
- new parameter "constraints/and/linearize" to enable linearization of all <and> constraints (in presolving),
- new parameter "constraints/linear/aggregatevariables" to search for aggregations in equations in the presolving step
- changed parameter default values for the priority of presolver "dualfix" and "inttobinary"
- new parameter "constraint/linear/upgrade/binpack" to enable or disable the linear upgrading process
- new parameter "constraint/linear/upgrade/eqknapsack" to enable or disable the linear upgrading process
- new parameter "constraint/linear/upgrade/invarknapsack" to enable or disable the linear upgrading process
- new parameter "constraint/linear/upgrade/knapsack" to enable or disable the linear upgrading process
- new parameter "constraint/linear/upgrade/logicor" to enable or disable the linear upgrading process
- new parameter "constraint/linear/upgrade/setppc" to enable or disable the linear upgrading process
- new parameter "constraint/linear/upgrade/varbound" to enable or disable the linear upgrading process
- new parameter "constraints/SOS1/branchSOS" to enable or disable branching on SOS1 constraints
- new parameter "constraints/SOS1/branchNonzeros" to decide whether SOS1 constraint with largest number of nonzero variables is picked for branching
- new parameter "constraints/indicator/branchIndicators"  to decide whether it is branched on indicator constraints in enforcing
- new parameter "constraints/indicator/genLogicor" to decide whether logicor constraints instead of cuts are generated
- new parameter "constraints/indicator/sepaAlternativeLP" to decide whether separation takes place using the alternative LP
- new parameter "constraints/linear/simplifyinequalities" to enable a simplification step for inequalities; default value is set to FALSE = disabled
- new parameter "constraints/linear/dualpresolving" to disable dual presolving step in the linear constraint handler; default value is TRUE

fixed bugs:
- added handling of the case of roundable variables with 0 objective in presol_dualfix.c
- fixed handling of unbounded variables with 0 objective in SCIPlpGetModifiedPseudo[Proved]Objval() (lp.c)
- fixed CTRL-C if NO_SIGACTION is set (e.g., for MinGW)
- fixed bug that a missing CONSTRANS in constraint handler leads to NULL pointer as constraint data for the
  copied constraints instead of pointer copies of the consdata (as explained in the constraint handler "HowTo")
- fixed bug with reading empty lines in TSP example
- fixed bug with writing the MIP relaxation to a file concerning the objective function; in case the original 
  objective function is requested, the transformed objective function gets re-transformed (scaling, offset)  
- added checks whether a plugin (handler) has already been included to avoid later complications e.g. with parameters.
- fixed obvious bug in linear constraint data sorting. Most part of the code assumed pure index sorting, but in fact,
  it was sorted by variable type as first criterion and index as second criterion.
- fixed bug with wrong objective sense output for transformed problem. The transformed problem is always a minimization
  problem!
- fixed numerical issue in linear constraint propagation: need slightly more aggressive tightening such that probing does
  not choose a wrong value for fixing inside an epsilon interval
- fixed bug with objective scaling after restart
- fixed bug with useless objective cutoff in LNS heuristics
- fixed bug with wrong 'tightened' return value of some of the change bounds methods
- fixed bug with non-conformal parameter name in reader_ppm
- fixed bugs in sorttpl.c: fixed wrong arraysize in shellsort; in case an has at most one element, then no sorting is applied
- fixed bug in cons_countsols.c concerning variable locking
- fixed wrong if condition for function call in sorttpl.c 
- forced full propagation in presolving -> this fixes a bug that implied that variable locks became inconsistent
- avoid aggregation of implicit integers with fractional aggregation scalars
- fixed infinite loop in LP file reader if a line exceeds the character limit
- replaced calls to perror() by SCIP error message using strerror(errno); this avoids problems with the error output stream
- fixed bug in method SCIPgetProbvarLinearSum() 
- fixed bug in aggregateActiveIntVars(): If a < 0, multiply a*x + b*y == c by -1 (algo for finding initial solution 
  does only work for a > 0).
- fixed bugs in second part of consdataTightenCoefs(): Removed min/maxleftactisinfinity (definition was not
  correct), fixed calculation of min/maxleftactivity, and removed asserts concerning whether all redundant vars
  were deleted (led to different behavior in debug and opt mod).
- corrected invalid memory access in tcliqueIsEdge: added check whether node1 has no neighbors (tclique_graph.c)
- fixed numerical bug in dual presolving of linear constraint handler
- fixed typo in documentation: default value for "dynamic" parameter is FALSE for all constraint handlers!
- fixed bug with multi-aggregated variables in cons_logicor: instead of fixing them, a linear constraint will be created
- fixed bug with uncatched LPSOLSTAT after hitting a time or iteration limit

SCIP version 1.00
=================

compiling:
- added .exe extension to binaries of MinGW
- added "LPS=none" for compiling SCIP without a LP solver
- modified the default LP solver to be SoPlex instead of CPLEX
- removed the ".static" extension associated to the LINK variable from the Makefile system
  (If you want to build makefiles for shared library generation, use the OPT variable. For example,
  you could create a makefile "make/make.linux.x86.gnu.opt-shared" and compile it with "make OPT=opt-shared".)
- added version numbers to library files
  (There will be a softlink generated in the lib/ and bin/ directories without version number that
  point to the latest compiled version.)
- made ZIMPL=true the default; if you do not want to include ZIMPL support, call "make ZIMPL=false"

interface:
- new callback method SCIPdialogFree()
- new method SCIPreadSol()
- new method SCIPgetVarRedcost()
- new method SCIPnodeUpdateLowerboundLP()
- linear and knapsack constraint handler may now deal with coefficients of value zero
- parameters are now separated into basic and advanced, the latter ones have been moved to extra submenus
- new method SCIPwriteMIP()
- calling SCIPwriteLP is now possible in Solved Stage
- new parameter "maxbounddist" for SCIPincludeSepa() and constructor ObjSepa()
- new method SCIPsepaGetMaxbounddist()
- removed parameter "branchdir" from SCIPbranchVar()
- new parameters "leftchild", "eqchild", and "downchild" for SCIPbranchVar()
- new method SCIPcalcNodeselPriority()
- new parameter "estimate" for SCIPcreateChild()
- removed method SCIPnodeGetPriority()
- new method SCIPnodeGetEstimate()
- new methods SCIPgetLocalOrigEstimate() and SCIPgetLocalTransEstimate()
- new parameter "restart" for method SCIPfreeSolve()
- new method SCIPnodeGetDomchg()
- new methods SCIPboundchgGetNewbound(), SCIPboundchgGetVar(), SCIPboundchgGetBoundchgtype(),
  SCIPboundchgGetBoundtype(), SCIPboundchgIsRedundant(), SCIPdomchgGetNBoundchgs(), SCIPdomchgGetBoundchg()
- new method SCIPisStopped()
- SCIPgetVarStrongbranch() now also returns lperror == TRUE if the solving process should be stopped, e.g., because
  of a time limit
- new method SCIProwIsInGlobalCutpool()
- removed parameter "lowestboundfirst" from SCIPincludeNodesel()
- replaced methods SCIPvarGetClosestVlb() and SCIPvarGetClosestVub() from pub_var.h by new methods
  SCIPgetVarClosestVlb() and SCIPgetVarClosestVlb() in scip.h
- new method SCIPresetParams()
- modified SCIP_SUBVERSION to be a number instead of a string (to be able to use #if SCIP_SUBVERSION >= ...)
- SCIPsubversion() now returns an int instead of a const char*
- new methods SCIPtightenVarLbGlobal() and SCIPtightenVarUbGlobal()
- new method SCIPgetRootNode() (in combination with SCIPcutoffNode(), this allows the immediate finishing of the optimization)
- new parameter "force" for SCIPtightenVarLb() and SCIPtightenVarUb()

plugins:
- new C templates disp_xxx.h and dialog_xxx.h, and C++ wrapper classes objdisp.h and objdialog.h, respectively
- new improvement heuristic "oneopt"
- improved performance of linear constraint propagation by delaying some floor/ceil calculations
- new node selection rule "estimate" (best estimate search)
- best estimate search is now used in all large neighborhood search heuristics
- new heuristic "actconsdiving" following an idea of John Chinneck
- new node selection rule "hybridestim"
- improved performance of clique cut separator
- modified reader "sol", st. files which where created via typing the order of commands 'set log *.sol', 'disp sol var -', 
  'set log cplex.log' in Cplex can now be read
- modified probing presolver to do multiple cycles if called in subsequent runs
- greatly improved performance of LP file reader by replacing string copies with pointer copies
- changed sort algorithm in probing presolver
- added flow cover separator
- gomory cuts are now also separated for integral slack variables
- less aggressive in Gomory cut separation
- strong CG cuts are now also separated for integral slack variables
- default dialog menu now includes the commands "set default" and "display parameters"
- new dummy LP interface "lpi_none.c"; useful for running SCIP without a LP solver

parameters:
- new parameter "separating/clique/backtrackfreq" to speed up clique cut separation in heuristic fashion
- new parameters "separating/*/maxbounddist" to have individual maxbounddist parameters per separator
- changed default value of global "separating/maxbounddist" to 1.0
- new parameter "separating/redcost/continuous"
- new parameter "heuristics/feaspump/maxstallloops"
- priority parameters are now restricted to be in [INT_MIN/4,INT_MAX/4] to avoid overflow errors in comparison methods
- new parameter "presolving/immrestartfac"
- changed default value of "numerics/boundstreps" to 0.05 in order to avoid very long propagation loops on continuous variables
- new parameter "nodeselection/childsel" to control the child selection
- new parameters "heuristics/*diving/backtrack" to activate 1-level backtracking for most of the diving heuristics
- increased priority of "estimate" node selector, such that this is the new default node selector
- changed default value of "separating/objparalfac" to 0.01 for performance reasons
- changed default values of "heuristics/*diving/backtrack to TRUE
- changed default value of "nodeselection/restartdfs/stdpriority" to 10000
- changed meaning of parameter setting "nodeselection/childsel = l"; old meaning is now called 'r'
- changed default value of "presolving/restartfac" to 0.05
- changed default value of "presolving/restartminred" to 0.10
- changed default value of "constraints/linear/propfreq" to 1
- changed default value of "separating/objparalfac" to 0.0001
- changed default value of "conflict/maxvarsfac" to 0.1
- changed default value of "conflict/useprop" to TRUE
- changed default value of "conflict/useinflp" to TRUE
- changed default value of "conflict/usepseudo" to TRUE
- changed default value of "conflict/maxlploops" to 2
- changed default value of "conflict/lpiterations" to 10
- changed default value of "conflict/interconss" to -1
- changed default value of "conflict/reconvlevels" to -1
- changed default value of "conflict/settlelocal" to FALSE
- new parameter "conflict/enable" to globally enable or disable conflict analysis
- new parameters "constraints/linear/maxcardbounddist" and "constraints/knapsack/maxcardbounddist"

features:
- the doxygen documentation now has HowTo's for all plugin types
- the doxygen documentation now contains a FAQ
- SCIP now has a couple of specialized settings, all called scip_*.set
- SCIP is now compatible to the Exception branch of SoPlex
- presolving, cut separation, primal heuristics, and strong branching now better respect time limit
- time limit is now forwarded to lp solving algorithm
- added option to write node LP and MIP relaxations to LP file from interactive shell
- modified cut selection code
- cut conversion into linear constraints after a restart now works better
- if possible, objective function is scaled to make objective value integral with gcd 1
- slightly modified bound substitution heuristic in SCIPcalcMIR() and SCIPcalcStrongCG()
- slightly less conservative in numerics for SCIPmakeRowIntegral()
- removed performance bottleneck with non-bfs based node selectors and large leaf queues at the cost of a small
  memory overhead (2 ints per node in the leaf queue); this improves performance quite a bit on instances that
  take a large number of branching nodes
- slightly modified automatic constraint aging strategy

fixed bugs:
- fixed bug in rowScale() concerning deletion of almost zero coefficients
- fixed bug in SCIPcutpoolAddNewRow() concerning update of minidx and maxidx of added row
- removed wrong assert in bounddisjunction constraint enforcement
- fixed bug with wrong bound changes of loose variables
- fixed bug with aggregated variables in debug solution test
- fixed numerical buf with slightly different LP optimum after resolving due to probing/diving
- fixed bug in cmir and flowcover separator with variables which are currently not in the LP
- weakened assert in primal.c in order to avoid numerical troubles
- changed wrong assert in SCIPnodeAddBoundinfer()
- fixed bug in intshifting and oneopt heuristic with variables which are currently not in the LP
- fixed bug in integer objective seperator with restarts
- fixed bug in integer objective seperator with dynamic columns
- fixed numerical bug in propagator of varbound constraint handler
- fixed numerical bug in rowScaling of lp.c, which possibly cut off feasible solutions
- fixed bug with too long variable names
- fixed bug with strange user descriptions of plugins
- changed position of some asserts to prevent segmentation faults
- SCIPgetAvgPseudocostCount() and SCIPgetAvgPseudocostCountCurrentRun() now return the average over all integer variables instead
  of all variables, since pseudo costs are not recorded for continuous variables
- fixed wrong sorting of plugins with priorities close to INT_MIN or INT_MAX
- replaced "line" by "read" in Makefile, since "line" is non-standard
- fixed bug in variable bound constraint handler with changing bounds on multi-aggregated variables
- fixed bug in variable bounds search and insertion method
- fixed bug with LP size management in probing if column generation is used
- fixed bug with branching rules that produce only one child with no changes to the problem
- fixed bug in linear constraint handler: only tight cuts are transformed into linear constraints after restart
- fixed bug in LP file reader with row names identical to section keywords
- fixed bug that external relaxator is not reset appropriately for a new problem instance
- fixed potential bugs due to errors in resolving the LP after diving or probing
- removed wrong assert in function paramWrite()
- fixed potential bugs in SCIPpriceLoop() and priceAndCutLoop(), st. now all LP solution stati are handled appropriately
- fixed bug with uninitialized in check.awk
- fixed bug with primal heuristics reducing the cutoff bound such that the current node is cut off
- now it is possible to add original solutions
- fixed bug that cut age was not reset to zero for violated cuts
- fixed bugs with SCIPgetBestsol() returning NULL after a restart with user objective limit
- fixed wrong status code in presence of user objective limit and a feasible solution that is not better than the limit
- fixed bug regarding modifying bounds in original problem if negated original variables exist
- fixed bug in ZIMPL file reader for multiple occurrences of a single variable in the objective function
- fixed bug with deleting variables from the transformed problem that are contained in the implication graph
- fixed bug in oneopt heuristic: must not be called on pseudo nodes if continuous variables are present
- significantly improved performance of c-MIR and Gomory cuts by caching closest VLB and VUB info
- fixed bug in root reduced cost fixing propagator that leads to an empty domain for a variable as a proof of optimality
  of the current incumbent
- fixed bug in bounddisjunction constraint handler with propagation of multi-aggregated variables
- fixed bug with almost integral multi-aggregation in dual presolve of linear constraint handler
- fixed bug with numerics in update of min/maxactivity in linear constraint handler
- fixed bug with numerics in linear constraint handler due to non-representable BOUNDSCALETOL


SCIP version 0.90
=================

compiling:
- added ncurses to the readline entries in the make/make.* files
- added quotes to sed expressions in Makefile (needed under Windows)
- modified makefiles for Windows/Intel
- added automatic query script in the Makefile for soft-link names

interface:
- new parameter "solinfeasible" for constraint handler callback methods ENFOLP and ENFOPS
- new method SCIPgetVerbLevel()
- slightly changed the meaning of the result codes returned by external relaxators: if they modify the LP or tighten
  bounds of variables, they are not automatically be called again (it is assumed that they already made use of these
  changes). They are only called again, if they returned SCIP_SUSPENDED or if some other plugin modified the LP.
- new parameter "escapecommand" for SCIPdialoghdlrAddHistory()
- new method SCIPescapeString()
- renamed all occurences of "removeable" by the correct English word "removable":
  SCIPconsIsRemovable(), SCIPsetConsRemovable(), SCIPvarIsRemovable(), SCIPcolIsRemovable(), SCIProwIsRemovable()
- new parameter "sticktonode" in SCIPcreateCons(), SCIPcreateConsAnd(), SCIPcreateConsBounddisjunction(),
  SCIPcreateConsKnapsack(), SCIPcreateConsLinear(), SCIPcreateConsLogicor(), SCIPcreateConsOr(), SCIPcreateConsVarbound(),
  SCIPcreateConsXor(), SCIPcreateConsSetpart(), SCIPcreateConsSetpack(), SCIPcreateConsSetcover():
  usually, you should set this to FALSE; if you want to add constraints
  as node markers with node data and, e.g., use the "activate" and "deactivate" callbacks to get informed about the
  activation and deactivation of the node, you should set this flag to TRUE in order to make sure, that the constraint
  will always be associated to the node and not moved to a more global node if this would be possible
- removed method SCIPgetVarData(); use SCIPvarGetData() from pub_var.h instead
- replaced callback parameter "inlploop" and "inplunging" by "heurtiming" in SCIP_DECL_HEUREXEC
- replaced parameters "pseudonodes", "duringplunging", "duringlploop", and "afternode" by "timingmask" in 
  SCIPincludeHeur() and constructor of ObjHeur() class
  use the following table to translate old settings into the new timingmask:

    PSEUDONODES  DURINGPLUNGING  DURINGLPLOOP  AFTERNODE  timingmask
          FALSE           FALSE         FALSE      FALSE  SCIP_HEURTIMING_BEFORENODE
           TRUE           FALSE         FALSE      FALSE  SCIP_HEURTIMING_BEFORENODE
          FALSE            TRUE         FALSE      FALSE  SCIP_HEURTIMING_BEFORENODE
           TRUE            TRUE         FALSE      FALSE  SCIP_HEURTIMING_BEFORENODE
          FALSE           FALSE          TRUE      FALSE  SCIP_HEURTIMING_BEFORENODE | SCIP_HEURTIMING_DURINGLPLOOP
           TRUE           FALSE          TRUE      FALSE  SCIP_HEURTIMING_BEFORENODE | SCIP_HEURTIMING_DURINGLPLOOP
          FALSE            TRUE          TRUE      FALSE  SCIP_HEURTIMING_BEFORENODE | SCIP_HEURTIMING_DURINGLPLOOP
           TRUE            TRUE          TRUE      FALSE  SCIP_HEURTIMING_BEFORENODE | SCIP_HEURTIMING_DURINGLPLOOP
          FALSE           FALSE         FALSE       TRUE  SCIP_HEURTIMING_AFTERLPPLUNGE
           TRUE           FALSE         FALSE       TRUE  SCIP_HEURTIMING_AFTERPLUNGE
          FALSE            TRUE         FALSE       TRUE  SCIP_HEURTIMING_AFTERLPNODE
           TRUE            TRUE         FALSE       TRUE  SCIP_HEURTIMING_AFTERNODE
          FALSE           FALSE          TRUE       TRUE  SCIP_HEURTIMING_AFTERLPPLUNGE | SCIP_HEURTIMING_DURINGLPLOOP
           TRUE           FALSE          TRUE       TRUE  SCIP_HEURTIMING_AFTERPLUNGE | SCIP_HEURTIMING_DURINGLPLOOP
          FALSE            TRUE          TRUE       TRUE  SCIP_HEURTIMING_AFTERLPNODE | SCIP_HEURTIMING_DURINGLPLOOP
           TRUE            TRUE          TRUE       TRUE  SCIP_HEURTIMING_AFTERNODE | SCIP_HEURTIMING_DURINGLPLOOP

- new calls SCIPgetLPBInvCol() and SCIPgetLPBInvACol() to access the basis inverse and simplex tableau columnwise
- new parameter "ndomredsfound" of SCIPpropagateProbing()
- new parameters "fixintegralrhs", "maxfrac", "mksetcoefs", and "fracnotinrange" in SCIPcalcMIR()
- modified SCIPfixVar() such that in problem creation stage it will change the bounds as requested even if the fixing
  value is outside of the current bounds
- new methods SCIPgetGlobalCutpool(), SCIPgetPoolCuts(), SCIPcutpoolGetCuts(), SCIPcutGetRow(), and SCIPcutGetAge()
- slightly changed semantics of SCIPaddConsNode() and SCIPaddConsLocal(), such that a constraint which is added to the
  root node now enters the global problem (and is still existing after a restart)
- new methods SCIPconsGetNLocksPos() and SCIPconsGetNLocksNeg()

plugins:
- new primal heuristic "rens"
- new primal heuristic "mutation"
- slightly modified crossover and rins heuristics
- improved presolving of and, or, and xor constraints
- improved performance of intdiving heuristic
- new primal heuristic "veclendiving"
- improved heuristic "octane"
- improved heuristic "shifting"
- slightly modified rens and localbranching heuristics
- modified guided diving heuristic such that it equals the original version of the heuristic (i.e., round in direction
  of the current incumbent solution instead of the average of all primal feasible solutions)
- modified c-MIR cut separator to more closely resemble the original version of Marchand and Wolsey
- implemented additional dual presolving in linear constraint handler
- slightly modified presolving of varbound constraint handler
- c-MIR cuts try now to scale the cut to integral values; however, cuts are still generated if this fails
- ID character for intdiving heuristic is now 'I'
- new heuristic "intshifting" (ID character 'i')

parameters:
- new parameter "reading/zplreader/changedir" to control behavior of path switching of ZIMPL file reader
- new parameter "reading/zplreader/parameters" to pass additional parameters to ZIMPL
- new parameter "propagating/abortoncutoff"
- changed default value of "heuristics/octane/usediffray" to FALSE
- new parameter "heuristics/octane/useavgwgtray"
- removed parameter "heuristics/octane/usediffbwray"
- renamed parameter "heuristics/octane/useavgray" to "heuristics/octane/useavgnbray"
- new parameter "heuristics/octane/useavgray"
- changed default value of "heuristics/rens/binarybounds" to TRUE
- changed default value of "heuristics/octane/freq" to -1 in order to deactivate Octane
- new parameter "separating/cmir/aggrtol"
- new parameter "separating/cmir/fixintegralrhs"
- new parameter "separating/cmir/densityscore"
- new parameter "separating/maxruns"
- new parameters "conflict/restartnum" and "conflict/restartfac"
- parameter "heuristics/feaspump/maxsols" is now strict, i.e., if n solutions were already found, the feasibility pump
  starts to work only if maxsols <= n, instead of maxsols < n
- new parameter "presolving/restartminred" which forbids another restart if the last one was not successful enough
- new parameter "limits/absgap" to define an absolute gap limit

features:
- primal heuristics that run before the node is solved now know already whether the LP will be solved at the current node
  or not
- command shell now understands escape characters ",', and \ which makes it possible to read in files with spaces in
  the name
- updated XPress interface to XPress-MP 17 (contributed by Michael Perregard)
- the EXITSOL callback of the plugins is now called before the LP and the global cut pool are freed
- possibility of SAT-like restarts after a number of conflict constraints have been found
- in the root node of the very first run, heuristics with timing AFTERNODELPNODE, AFTERLPPLUNGE, AFTERPSEUDONODE, and
  AFTERPSEUDOPLUNGE are now called before the enforcement of the constraint handlers, in particular before the branching
  rules; in this way, the branching rule can already benefit from a tighter primal bound
- if a heuristic found a better solution after the LP loop (and in particular the AFTERNODE heuristics in the root node
  of the very first run, see above), domain propagation and LP solving is triggered again; this allows for additional
  reduced cost tightening and other dual propagations
- hard-coded relative objective gain to consider a separation loop to be stalling is now changed from 1e-3 to 1e-4, which
  means that separation is not aborted as early as before

fixed bugs:
- fixed bug with adding constraints with INITIAL=true and separating them afterwards, which lead to a second addition
  of the constraint's relaxation in the child node
- fixed bug in cmir cut separator, that 8*delta was not tried
- fixed bug in cmir cut separator with wrong sign of slack in row score function
- fixed bug with string pointer copy instead of string content duplication in constructors of C++ wrapper classes
- fixed bug in CPLEX interface with basis access methods that dualopt has to be called for more error status codes
- fixed bug with inserting two variable bounds of the same type on the same variable with the same bounding variable
  but with different sign of coefficient (e.g., x <= 10*z + 5 and x <= -5*z + 10); in previous version, one of the
  two was removed, although both have a useful meaning; now, we keep both, and detect a stronger global bound in
  the implication graph presolving
- fixed bug in cmir cut separator with weights fixed to zero, thus making the current aggregation invalid
- fixed bug that SCIPvarGetAvgSol() always returned the upper bound (affected guided diving heuristic)
- fixed bug in RENS, RINS, Local Branching, Crossover, and Mutation heuristics with wrong variable - subvariable assignments
- fixed bug in cmir cut separator with wrong calculation of cut efficacies
- objective function is now also checked for integrality after problem transformation (fixed a bug that a solution which
  was generated between transformation and presolving for an integral objective function did not reduce the cutoff bound
  by one)
- fixed a bug with cmir cut efficacy calculation (however, on my first tests, the performance reduced slightly!)
- fixed bug in infeasible/bound-exceeding LP conflict analysis if the bounds were relaxed in diving (happens in
  intshifting heuristic)
- too large deltas are now also rejected in c-MIR cut separation
- separation LPs are now immediately resolved after a bound change was generated by a cut separator; before, the separation
  round was prematurely aborted, which means that a separation round limit was sometimes reached very quickly and some
  of the separators were not even called a single time


SCIP version 0.82
=================

compiling:
- removed ncurses and pthread libraries from the Makefile; pthread is now only linked if CPLEX is used

interface:
- new method SCIPsolveProbingLPWithPricing()
- new methods SCIPcolGetMinPrimsol() and SCIPcolGetMaxPrimsol()
- new method SCIPgetColRedcost()
- new method SCIPvarGetRootRedcost()
- new methods SCIPgetLPRootObjval(), SCIPgetLPRootColumnObjval(), and SCIPgetLPRootLooseObjval()
- new methods SCIPchgVarLbRoot() and SCIPchgVarUbRoot()
- new method SCIPinRepropagation()
- new methods SCIPgetAvgPseudocostScore(), SCIPgetAvgPseudocostScoreCurrentRun(), SCIPgetAvgConflictScore(),
  SCIPgetAvgConflictScoreCurrentRun(), SCIPgetAvgInferenceScore(), SCIPgetAvgInferenceScoreCurrentRun(),
  SCIPgetAvgCutoffScore(), and SCIPgetAvgCutoffScoreCurrentRun()
- new methods SCIPaddDialogInputLine() and SCIPaddDialogHistoryLine()
- method SCIPgetNConflictClausesFound() renamed to SCIPgetNConflictConssFound()
- method SCIPgetNConflictClausesFoundNode() renamed to SCIPgetNConflictConssFoundNode()
- method SCIPgetNConflictClausesApplied() renamed to SCIPgetNConflictConssApplied()
- new method SCIPgetFocusDepth()
- methods SCIPisLbBetter() and SCIPisUbBetter() have an additional parameter and slightly different meaning
  (they now compare the bound improvement *relatively* to the width of the domain and the bound itself)
- new solution status code SCIP_STATUS_STALLNODELIMIT
- slightly modified semantics of the CONSINITLP callback in the constraint handlers
- marking a constraint to be "initial" now means in addition, that if the constraint is added to a local node
  it will enter the LP at the time the node is first processed, even if parameters forbid separation at this
  node
- SCIPgetNSols() now returns an int instead of SCIP_Longint
- new method SCIPtransformProb() to create the transformed problem; enables the user, e.g., to add primal solutions
  before the presolving begins
- method SCIPreadProb() does not call SCIPfreeTransform() anymore; file readers that want to extend the existing
  problem must now call SCIPfreeTransform() themselves before modifying the original problem
- method SCIPgetBinvarRepresentative() can now also be called in problem creation stage
- additional parameter "maxpricerounds" in method SCIPsolveProbingLPWithPricing()
- changed name of method SCIPpresolGetNVarTypes() to SCIPpresolGetNChgVarTypes()
- changed name of method SCIPconshdlrGetNVarTypes() to SCIPconshdlrGetNChgVarTypes()
- new method SCIPcreateSolCopy()
- new method SCIPareSolsEqual()
- method SCIPsplitFilenames() now treats both versions of slashes, '/' and '\', as directory delimiters (under
  MinGW and CygWin, both are valid; so, we cannot treat file names anymore where the other slash is used as a
  regular character)

plugins:
- new primal heuristic "shifting"
- new separator "redcost" which replaces the internal reduced cost strengthening
- new propagator "rootredcost" which applies reduced cost fixing at the root node whenever a best new primal solution
  was found
- new constraint handler "bounddisjunction"
- new methods SCIPgetRowKnapsack(), SCIPgetRowLinear(), SCIPgetRowLogicor(), SCIPgetRowSetppc(), and SCIPgetRowVarbound()
  for obtaining the linear relaxation of a corresponding constraint
- new methods SCIPgetNVarsAnd() and SCIPgetVarsAnd()
- new methods SCIPgetWeightsKnapsack(), SCIPgetNVarsKnapsack(), SCIPgetVarsKnapsack(), and SCIPgetWeightsKnapsack()
- new methods SCIPgetNVarsLinear(), SCIPgetVarsLinear(), and SCIPgetValsLinear()
- new methods SCIPgetNVarsOr() and SCIPgetVarsOr()
- new methods SCIPgetLhsVarbound(), SCIPgetRhsVarbound(), SCIPgetVarVarbound(), SCIPgetVbdvarVarbound(), and
  SCIPgetVbdcoefVarbound()
- new methods SCIPgetNVarsXor() and SCIPgetVarsXor()
- knapsack presolver now generates cliques in the clique table (this essentially solves neos1.mps)
- LP and MPS file readers are now able to parse lazy constraints and user cuts sections
- diving heuristics abort earlier (did not come back in reasonable time on fast0507)
- renamed "sol" file reader to "fix" file reader (reads partial solution files and fixes variables to the given values)
- added "sol" file reader which reads complete solution files and adds the solutions to the solution pool
- additional flag "delay" for pricers
- new presolver "inttobinary"
- new display column "lpobj"

parameters:
- new parameter constraints/linear/separateall
- new parameter conflict/lpiterations
- new parameter conflict/keepreprop
- removed parameter propagating/redcostfreq, because reduced cost strengthening is now an external separator plugin
- new parameters branching/relpscost/conflictweight, branching/relpscost/inferenceweight,
  branching/relpscost/cutoffweight, and branching/relpscost/pscostweight
- new parameter conflict/settlelocal
- removed parameter conflict/maxunfixed
- parameter conflict/maxclauses renamed to conflict/maxconss
- parameter conflict/interclauses renamed to conflict/interconss
- parameter conflict/reconvclauses replaced by conflict/reconvlevels
- new parameter conflict/depthscorefac
- parameter conflict/uselp replaced by conflict/useinflp and conflict/useboundlp
- new parameter limits/stallnodes
- changed default value of constraints/obsoleteage to -1
- changed default value of branching/relpscost/conflictweight to 0.01
- changed default value of branching/relpscost/inferenceweight to 0.0001
- changed default value of branching/relpscost/cutoffweight to 0.0001
- in bfs node selector, parameter "minplungedepth" is now stronger than "maxplungedepth" if they conflict

features:
- extensions to the LP are kept even if the LP is not solved at the current node; however, if the LP turned out to
  be numerically instable, the extensions of the current node are still discarded
- slightly changed priorities of constraint handlers
- command line syntax changed to support batch modus without piping stdin with "<" or "|" operators
- now, conflict constraints are also created if they were generated in strong branching or diving with insertion depth
  equal to the current depth
- advanced command line syntax:
  -l <logfile>  : copy output into log file
  -q            : suppress screen messages
  -s <settings> : load parameter settings (.set) file
  -f <problem>  : load and solve problem file
  -b <batchfile>: load and execute dialog command batch file (can be used multiple times)
  -c "command"  : execute single line of dialog commands (can be used multiple times)
- added removal of bound-redundant rows from the LP during root node LP solving loop

fixed bugs:
- fixed bug with invalid lazy updates after a restart where the LP is not solved again (e.g., due to all variables
  being fixed)
- fixed bug in MPS file reader with OBJSENSE
- fixed numerical bug in SCIPrealToRational() [thanks to Anders Schack-Nielsen]
- fixed bug in crossover heuristic with negative timelimit
- fixed bugs resulting from inactive general integer variables being member of the variable bounds array of a variable
- removed bug in conflict analysis with wrong redundancy check
- fixed bug that unexpected end of stdin (Ctrl-D or piped-in file without "quit" command) gives a segmentation fault
- fixed bug in knapsack constraint disaggregation that may lead to acceptance of infeasible solutions
- fixed bug with inconsistent data structures after a global bound was changed at a local subproblem and the
  local bounds are not contained anymore in the new global bounds
- fixed bug in LP reader with potentially uninitialized pointers [thanks to Martin Mueller]
- fixed bug in SCIPcliqueSearchVar() [thanks to Anders Schack-Nielsen]
- fixed bug in SCIPcliqueAddVar() [thanks to Anders Schack-Nielsen]
- fixed bug in updatePseudocost() with wrong lpgain distribution on multiple branching variables
  [thanks to Anders Schack-Nielsen]
- it is now possible to branch on constraints without the risk of going into an infinite loop, because constraints
  marked as "initial" will be put to the LP relaxation (of the child nodes) even if separation is prohibited by
  the parameter settings
- fixed bug with missing LP size updates after pricing or cut separation in probing [thanks to Marc Nuenkesser]
- fixed bug that locally valid varbound constraints produce VLB/VUB entries [thanks to Anders Schack-Nielsen]
- fixed bug in knapsack constraint handler where a modifiable constraint may be declared redundant
- fixed bug in knapsack presolving with redundancy check after applyFixings() [thanks to Anders Schack-Nielsen]
- fixed bug in objconshdlr.h where member variable scip_maxprerounds_ was declared as an SCIP_Bool instead of an int
- fixed bug in CPLEX interface with getting basis information after the LP was modified and restored
- fixed bug in knapsack separator with empty initial covers
- fixed bug that SCIPgetLPSolstat() returns a valid status code even if the LP was not yet constructed for the
  current node
- fixed bug with adding implications that fix the implication variable to the opposite value (due to the bug, it was
  returned that the whole problem is infeasible)
- branching on nearly-integral variables is now avoided in relpscost branching, which lead to a numerical assertion
- removed wrong assert in varRemoveImplicsVbs()
- fixed bug with updating LP size in probing
- fixed dependency generation in example Makefiles


SCIP version 0.81
=================

examples:
- added two small pricer examples (for C and C++)
- updated example code (s.t. it compiles again)

interface:
- new method SCIPgetCuts()
- callback method CONSSEPA of constraint handler was split into two methods CONSSEPALP and CONSSEPASOL
- replaced method SCIPconshdlrWasSeparationDelayed() by two methods SCIPconshdlrWasLPSeparationDelayed()
  and SCIPconshdlrWasSolSeparationDelayed()
- callback method SEPAEXEC of separator was split into two methods SEPAEXECLP and SEPAEXECSOL
- replaced method SCIPsepaWasDelayed() by SCIPsepaWasLPDelayed() and SCIPsepaWasSolDelayed()
- additional parameter "sol" for methods SCIPaddCut(), SCIPgetCutEfficacy(), and SCIPisCutEfficacious()
- additional parameter "sol" for method SCIPseparateKnapsackCover()
- new methods SCIPsepaGetNConssFound() and SCIPsepaGetNDomredsFound()
- new methods SCIPgetVarConflictScore(), and SCIPgetVarConflictScoreCurrentRun()
- new method SCIPvarSetData()
- new method SCIPcreateUnknownSol()
- primal solutions may now contain values marked to be unknown (value is SCIP_UNKNOWN); unknown values don't contribute
  to the objective value of the solution; an unknown solution value should be treated as an arbitrary value in the
  variable's bounds, e.g., in the calculation of the feasibility of a constraint, a value inside the variable's bounds
  should be selected that makes the constraint as feasible as possible
- new method SCIPgetNConflictClausesFoundNode()
- new methods SCIPvarSetDelorigData(), SCIPvarSetTransData(), and SCIPvarSetDeltransData()
- new method SCIPvarHasBinaryImplic()
- renamed method SCIPgetNGlobalConss() to SCIPgetNConss()
- added methods SCIPgetConss(), SCIPgetNOrigConss(), and SCIPgetOrigConss()
- new parameter "printzeros" for methods SCIPprintSol(), SCIPprintTransSol(), SCIPprintBestSol(), and
  SCIPprintBestTransSol()
- new methods SCIPgetFixedVars() and SCIPgetNFixedVars()
- new method SCIPconstructLP() to force constructing the LP of the current node
- new method SCIPisLPConstructed()

plugins:
- new presolver "implics" to find bound changes and aggregations out of the implication graph
- logic or constraint handler now adds implications on clauses with 2 literals to the implication graph
- and/or constraint handlers now add implications to the implication graph
- xor constraint handler now uses stronger LP relaxation without auxiliary variable for xor constraint with 2 operands
- modified probing order in probing presolver
- LP file reader now accepts the keyword "Integer" for defining the start of the integer variables section
- added preliminary version of "intdiving" heuristic (disabled in default settings)
- slightly modified restartdfs node selector
- added crossover heuristic
- new file reader for (partial) solutions
- added "write statistics" command to default user dialogs

parameters:
- modified meaning of parameter presolving/probing/maxtotaluseless
- new parameter branching/inference/conflictweight
- heuristics with freq = 0 and freqofs > 0 are now called in depth level freqofs instead of being called in the root node
- added some parameters in local branching and RINS heuristic
- new parameter values 'p'rimal simplex and 'd'ual simplex in lp/initalgorithm and lp/resolvealgorithm

features:
- changed handling of added constraints in separation calls
- modified bookkeeping of locally added and disabled constraints such that the order of enabling and disabling
  constraints stays the same
- improved performance of the priority queue in conflict analysis

Makefile and Compilation:
- included version number in binary file name
- tried to make the code Windows compatible

fixed bugs:
- fixed bug in ZIMPL model reader with wrong chdir, if .zpl file is in current directory
- fixed bug in LP file reader with signed values without space between sign and value (e.g. "+2x" instead of "+ 2x")
- fixed various bugs in LP file reader
- also removed history_length, if NO_REMOVE_HISTORY is defined to support older versions of the readline library
- removed bug in implication addition
- fixed wrong assert with implications that imply a fixed variable
- fixed numerics in check method of linear constraint handler
- hopefully fixed bug with wrong path slash '/' under Windows
- fixed numerics in probing and linear constraint handler (rentacar was detected to be infeasible in presolving)
- fixed bug with calling heuristics in depths smaller than their frequency offset
- fixed bug with aggregating fixed variables
- fixed bugs in local branching and RINS heuristic
- fixed bug in LP file reader with explicit zero coefficients
- fixed bug in transitive implication addition
- fixed bug with numerical error in LP resolve after probing or diving

known bugs:
- if one uses column generation and restarts, a solution that contains variables that are only present in the transformed
  problem (i.e., variables that were generated by a pricer) is not pulled back into the original space correctly, since
  the priced variables have no original counterpart


SCIP version 0.80
=================

interface:
- MAJOR CHANGE:
  preceeded all data types with "SCIP_" - you may use shell script reptypes_scip.sh to rename the SCIP data types in
  your own source code (But use with care! Create a backup copy of your source first!)
- additional parameter "validnode" for SCIPaddConsLocal() and SCIPaddConsNode()
- new method SCIPgetNConflictClausesApplied()
- new method SCIPdelVar()
- new method SCIPgetVarStrongbranchLPAge()
- new method SCIPgetNConflictClausesApplied()
- new event type SCIP_EVENTTYPE_VARDELETED
- new method SCIPconsGetValidDepth()
- new method SCIPhashtableExists()
- method SCIPhashtableRemove() can now also be called, if the element does not exist in the table
- new method SCIPhashmapExists()
- method SCIPhashmapRemove() can now also be called, if the element does not exist in the map
- new method SCIPvarIsTransformedOrigvar()
- new method SCIPvarIsDeleted()
- new callback parameter "validnode" for the CONFLICTEXEC method of conflict handlers, which should be passed to
  SCIPaddConsNode()
- new method SCIPnodeGetNumber()
- new method SCIPsolveProbingLP() to solve the LP in a probing node (enables mixing of propagation and LP solving
  for diving heuristics)
- new method SCIProwGetDualfarkas()
- new method SCIPgetCurrentNode()
- new method SCIPinterruptSolve()
- new file i/o methods SCIPfopen(), SCIPfclose(), SCIPfprintf(), ... that operate on the data type SCIPFILE;
  these methods automatically use zlib methods if the zlib is enabled
- additional parameter "branchdir" for SCIPbranchVar()
- replaced method SCIPmessage() by SCIPverbMessage() with additional parameter "file"
- new methods SCIPerrorMessage(), SCIPwarningMessage(), SCIPdialogMessage(), and SCIPinfoMessage()
- new methods SCIPsetMessagehdlr(), SCIPsetDefaultMessagehdlr(), and SCIPgetMessagehdlr()
- new method SCIPpropagateProbingImplications()
- new methods SCIPvarGetNCliques(), SCIPvarGetCliques(), SCIPvarsHaveCommonClique(), SCIPvarHasImplic()
- new methods SCIPcliqueGetNVars(), SCIPcliqueGetVars(), SCIPcliqueGetValues(), SCIPcliqueGetId()
- new methods SCIPaddClique(), SCIPcalcCliquePartition()
- new event SCIP_EVENTTYPE_IMPLADDED
- new method SCIPgetLPI() which makes all methods in scip/lpi.h available to the user
- put block memory shell and tclique algorithm into separate subdirectories
- new parameter "duringlploop" of SCIPincludeHeur() - heuristics can now run during the price-and-cut loop at a node
- new methods SCIPgetRandomInt() and SCIPgetRandomReal()
- new method SCIPstrtok()
- new methods SCIPsetConsInitial(), SCIPsetConsSeparated(), SCIPsetConsEnforced(), SCIPsetConsChecked(),
  SCIPsetConsPropagated(), SCIPsetConsLocal(), SCIPsetConsDynamic(), SCIPsetConsRemoveable()
- new method SCIPheurGetNBestSolsFound()
- new event types SCIP_EVENTTYPE_GLBCHANGED and SCIP_EVENTTYPE_GUBCHANGED

plugins:
- added command "write solution" to default dialog
- changed restart dfs nodeselector to sort leaves by node number instead of node depth to aviod jumping around in the
  search tree after a restart was applied and the current dive ended due to infeasibility
- removed "objfeaspump" heuristic, because the functionality can be achieved by using the "feaspump" heuristic
- diving heuristics are now applying propagation after each bound change
- new primal heuristic "octane"
- slightly changed feaspump heuristic, s.t. after finding a new best solution the target integral solution is modified
  randomly
- new method SCIPgetDualfarkasLinear() of linear constraint handler
- new method SCIPgetDualfarkasLogicor() of logicor constraint handler
- new method SCIPgetDualfarkasSetppc() of setppc constraint handler
- new method SCIPgetDualsolKnapsack() of knapsack constraint handler
- new method SCIPgetDualfarkasKnapsack() of knapsack constraint handler
- new method SCIPgetDualsolVarbound() of varbound constraint handler
- new method SCIPgetDualfarkasVarbound() of varbound constraint handler
- new Message Handler plugin
- added commands "write problem" and "write transproblem" to default dialog
- modified probing presolver to not add implications that are already included in the implication graph and clique table
- added file reader for LP format

parameters:
- replaced parameter presolving/restartbdchgs with parameters presolving/maxrestarts and presolving/restartfac
- new parameter conflict/maxclauses
- new parameter conflict/allowlocal
- new parameter branching/fullstrong/reevalage
- changed default values of heuristics/*/maxdiveavgquot and heuristics/*/maxdiveavgquotnosol to 0
- additional setting SCIP_VERBLEVEL_DIALOG in display/verblevel parameter
- additional LP pricing setting "partial"
- parameters constraints/agelimit and constraints/obsoleteage now iterprete the value 0 as a dynamic setting
- changed default values of constraints/agelimit and constraints/obsoleteage to 0
- changed default values of heuristics/objpscostdiving/maxsols and heuristics/rootsoldiving/maxsols to -1
- new parameter constraints/knapsack/disaggregation
- changed default value of separating/strongcg/maxroundsroot to 20
- changed default value of separating/cmir/maxroundsroot to 10
- new parameters separating/cmir/maxfails, separating/cmir/maxfailsroot and separating/cmir/trynegscaling
- number of fractional variables included in parameter separating/maxstallrounds
- changed default value of separating/maxstallrounds to 5
- new parameter presolving/probing/maxtotaluseless
- changed default value of presolving/probing/maxfixings to 50
- changed default parameter values to MIP settings:
  - conflict/useprop = FALSE
  - conflict/usepseudo = FALSE
  - display/verblevel = 4
  - separating/poolfreq = 0
  - constraints/linear/sepafreq = 0
  - constraints/and/sepafreq = 0
  - constraints/conjunction/sepafreq = 0
  - constraints/knapsack/sepafreq = 0
  - constraints/knapsack/sepacardfreq = 0
  - constraints/logicor/sepafreq = 0
  - constraints/or/sepafreq = 0
  - constraints/setppc/sepafreq = 0
  - constraints/varbound/sepafreq = 0
  - constraints/xor/sepafreq = 0
  - separating/clique/freq = 0
  - separating/cmir/freq = 0
  - separating/gomory/freq = 0
  - separating/impliedbounds/freq = 0
  - separating/strongcg/freq = 0
- replaced parameter constraints/linear/maxpresolaggrrounds with constraints/linear/maxpresolpairrounds
- changed default value of constraints/linear/maxaggrnormscale to 0.0, which means to not apply aggregation

features:
- reactivated multiaggregation in cons_linear.c on binary variables again (possible due to bug fix below)
- introduced subversion string
- adding variable bounds automatically adds the corresponding implication
- conflict clauses are now collected in a conflict store, redundant clauses are eliminated, and only the best
  "conflict/maxclauses" clauses are added permanently to the problem; the remaining clauses are only added
  temporarily, if they can be used for repropagation
- improved debugging for infeasible cuts and propagations, given a primal feasible solution
- slightly changed LP resolving loop in conflict analysis
- diving heuristics now apply propagation at each step
- if CPLEX returns that the LP exceeds the bound and if no additional LP solves are allowed in conflict analysis,
  we have to perform one additional simplex iteration to get the dual solution that actually violates the objective
  limit
- modified the influence of the depth level in conflict analysis
- new event type SCIP_EVENTTYPE_PRESOLVEROUND
- added zlib support
- replaced all abort() calls by SCIPABORT(); this is defined in def.h to be assert(FALSE)
- modified the Makefile to accept an additional parameter VERBOSE={true,false}
- improved knapsack cover separation
- changed linear constraint presolving s.t. redundant sides are not removed if constraint is an equality
- incorporated clique and implication information in knapsack constraint presolving
- improved performance of c-MIR separator
- cut pool is now also separated in root node (to find cuts again that were removed from the LP due to aging)
- improved preprocessing of variable bounds constraints
- removed transitive clique generation, because this produces way too many cliques
- improved preprocessing abort criteria
- added flags READLINE=true/false, ZLIB=true/false, ZIMPL=true/false to Makefile
- added possibility to disable certain features by using "make USRFLAGS=-DNO_REMOVE_HISTORY",
  "make USRFLAGS=-DNO_SIGACTION", "make USRFLAGS=-DNO_RAND_R", or "make USRFLAGS=-DNO_STRTOK_R"
- linear constraint handler now catches events of variables after the problem was completely transformed in order
  to avoid the whole bunch of LOCKSCHANGED events that are generated at problem transformation stage
- added redundancy detection for pairs of constraints in setppc constraint handler

fixed bugs:
- LP primal feasibility for bounds is now defined as absolute measure (was relative to the bound before);
  this fixes a bug (see alu8_9.mps), that an LP with an integral variable fixed to a large value yields an
  accepted solution with that variable slightly different than the fixed value; the integrality feasibility
  condition is measured with absolute differences, which leads to the fixed integer variable being fractional;
  this leads to an error if branching is performed on this variable
- locally fixed variables are no longer used as branching candidates even if their LP solution value is
  fractional (due to numerical reasons, see above)
- fixed minor bugs in debug code of primal.c and sol.c
- variables that are being multiaggregated are now automatically removed from all other variables' variable bound
  and implication arrays; this fixes bugs with methods, that rely on the fact, that the entries in the variable
  bound and implication arrays are active variables only
- aggregations are now always performed in a way, such that the variable of more general type is aggregated
  (with type generality being cont > implint > int > bin); in this way, a binary variable's representant is
  always binary (which was not the case before, and resulted in a bug in SCIPgetBinvarRepresentative())
- removed wrong asserts from lpi_cpx.c
- global bound changes now lead to the removal of redundant implications (such that the asserts in sepa_implbounds.c
  are now correct)
- due to usage of variable bounds, SCIPcalcMIR() may return LOOSE variables in the cut -> modified sepa_cmir.c,
  sepa_gomory.c, and sepa_strongcg.c to use SCIPcreateEmptyRow() and SCIPaddVarsToRow() instead of SCIPcreateRow()
  which only works for COLs
- removed bug in presol_probing.c: the vars of the sorted variables array have to be captured
- fixed bug in the output of solutions with priced variables
- fixed bug in propagation with parameters prop_maxrounds and prop_maxroundsroot
- removed wrong assertion in varAddImplic()
- conflict analysis can now handle errors in LP solving calls
- fixed bug in linear constraint handler with variables fixed to infinity
- fixed bug with potential infinite loop if a separator is delayed and the LP is infeasible
- fixed numerical bug in pseudo objective propagator with only slightly tightened bounds
- fixed bug with constraint handlers that can only enforce their constraints by adding cuts, but the maximal number of
  cuts to separate is set to 0; now, cuts that are generated in the constraint enforcement are used in any case
- removed bug in SCIPvarAddVlb() and SCIPvarAddVub() with fractional vlb/vubcoefs
- removed bug that an LP might be declared to be solved even if it was marked erroneous due to numerical problems
- fixed bug with redundant self implications that wrongly lead to the detection of infeasibility
- fixed bug that primal or dual rays might not be available because the wrong solver was used
- included message.o in LPI library, s.t. one can link this library indepentent of SCIP
- fixed bug that if diving heuristic that changes the objective values finds a solution, the cutoff is reinstalled in
  the LP solver (although the objective value has no meaning due to the objective function modification)
- fixed bug in knapsack constraint presolving with tightening coefficients and capacity
- fixed bug with modifiable constraints in linear constraint handler preprocessing
- fixed bug in clique separator that reduced performance
- increased performance of clique separator by allowing only a certain number of zero-weighted fill ins
- fixed bug in linear constraint handler that global activities are not updated after global bound changes


SCIP version 0.79
=================

interface:
- constraint handler callback methods CONSLOCK and CONSUNLOCK are replaced by a single method CONSLOCK with the
  number of locks being positive or negative
- methods SCIPvarLock(), SCIPvarLockDown(), SCIPvarLockUp(), SCIPvarLockBoth(), SCIPvarUnlock(), SCIPvarUnlockDown(),
  SCIPvarUnlockUp(), and SCIPvarUnlockBoth() are replaced by SCIPaddVarLocks() which returns a RETCODE
- methods SCIPvarLockDownCons(), SCIPvarLockUpCons(), SCIPvarUnlockDownCons(), and SCIPvarUnlockUpCons() are
  replaced by SCIPlockVarCons() and SCIPunlockVarCons() which return a RETCODE
- methods SCIPlockConsVars() and SCIPunlockConsVars() replaced with method SCIPaddConsLocks()
- additional parameter "maxproprounds" in SCIPpropagateProbing()
- changed memory interface (see memory.h), MEMHDR is now called BLKMEM
- additional parameter "aggregated" in SCIPmultiaggregateVars()
- new method SCIPgetObjNorm()
- new methods SCIPvarGetLbOriginal() and SCIPvarGetUbOriginal() for original problem variables
- methods SCIPvarGetLbGlobal(), SCIPvarGetUbGlobal(), SCIPvarGetLbLocal(), and SCIPvarGetUbLocal() now return the
  corresponding values of the transformed problem or current subproblem  even for original problem variables
- removed method SCIPsolGetObj() - use SCIPgetSolOrigObj() or SCIPgetSolTransObj() instead
- additional parameter "checkbounds" for SCIPtrySol(), SCIPtrySolFree(), SCIPcheckSol()
- new method SCIPcreateOrigSol()
- new method SCIPwriteImplicationConflictGraph()
- new callback methods INITSOL and EXITSOL for variable pricers, primal heuristics, conflict handlers,
  relaxators, separators, propagators, event handlers, node selectors, and display columns
- new parameter delay for presolvers
- new parameter delaypresol for constraint handlers
- new possible result SCIP_DELAYED for EXEC method of separators, presolvers, and propagators,
  and SEPA, PROP, and PRESOL methods of constraint handlers
- new methods SCIPsepaIsDelayed(), SCIPsepaWasDelayed(), SCIPpropIsDelayed(), SCIPpropWasDelayed(), SCIPpresolIsDelayed(),
  SCIPpresolWasDelayed(), SCIPconshdlrIsSeparationDelayed(), SCIPconshdlrIsPropagationDelayed(), 
  SCIPconshdlrIsPresolvingDelayed(), SCIPconshdlrWasSeparationDelayed(), SCIPconshdlrWasPropagationDelayed(), and
  SCIPconshdlrWasPresolvingDelayed()
- new method SCIPinProbing()
- new method SCIPgetProbName()
- source code was moved into subdirectories: replace includes #include "scip.h" by #include "scip/scip.h" and
  #include "objscip.h" by #include "objscip/objscip.h";
  This should allow a user to have include files of the same name as the ones of SCIP, e.g. "tree.h" or "var.h".
- method SCIPreadProb() does not free the current problem - this is done in SCIPcreateProb() now, which is usually
  called by a problem reader; in this way, a reader can generate "extra information" for the current problem, s.t.
  the full problem information can be distributed to different files read by different readers
- methods SCIPgetVarStrongbranch() and SCIPgetVarStrongbranchLast() now have two additional parameters that can
  be used to check, whether the returned values are correct dual bounds
- new method SCIPisLPSolBasic() to check, whether the current LP solution is basic (i.e. due to a simplex algorithm
  or barrier with crossover)
- event handlers are now available as C++ wrapper class
- method SCIPconshdlrGetNConss() is replaced by SCIPconshdlrGetNActiveConss() (returning the number of active constraints);
  method SCIPconshdlrGetNConss() does now return the total number of existing constraints, active and inactive
- method SCIPconshdlrGetStartNConss() is now called SCIPconshdlrGetStartNActiveConss()
- method SCIPconshdlrGetMaxNConss() is now called SCIPconshdlrGetMaxNActiveConss()
- new flag "afterrelaxation" for primal heuristics
- method SCIPdisableConsNode() is replaced by SCIPdelConsNode()
- method SCIPdisableConsLocal() is replaced by SCIPdelConsLocal()
- new method SCIPenableCons()
- new method SCIPdisableCons()
- new method SCIPenableConsSeparation()
- new method SCIPdisableConsSeparation()
- new method SCIPconsIsSeparationEnabled()
- added new parameter "dynamic" to SCIPcreateCons() and all plugin methods SCIPcreateCons...()
- callback method CONFLICTEXEC of conflict handlers receive additional parameters "dynamic" and "removeable"
- new methods SCIPgetAvgPseudocost(), SCIPgetAvgPseudocostCurrentRun(), SCIPgetAvgPseudocostCount(),
  SCIPgetAvgPseudocostCountCurrentRun(), SCIPgetAvgInferences(), SCIPgetAvgInferencesCurrentRun(),
  SCIPgetAvgCutoffs(), SCIPgetAvgCutoffsCurrentRun(), 
- new methods SCIPgetNPrimalLPs(), SCIPgetNPrimalLPIterations(), SCIPgetNDualLPs(), SCIPgetNDualLPIterations(),
  SCIPgetNBarrierLPs(), SCIPgetNBarrierLPIterations()
- new methods SCIPgetNPrimalResolveLPs(), SCIPgetNPrimalResolveLPIterations(),
  SCIPgetNDualResolveLPs(), SCIPgetNDualResolveLPIterations()
- new methods SCIPgetVarNStrongbranchs(), SCIPcolGetNStrongbranchs()
- new methods SCIPfindSimpleRational(), SCIPselectSimpleValue()
- new method SCIPvarGetImplIds()
- methods SCIPvarGetProbvar(), SCIPvarGetProbvarBinary() now return the fixed or multi-aggregated variable instead
  of returning NULL or aborting with an error message; in SCIPvarGetProbvarBinary(), the fixing of a fixed variable
  does not influence the negation status anymore
- method SCIPvarGetProbvarBound() returns the multi-aggregated variable instead of aborting with an error message
- method SCIPvarGetProbvarSum() does not set *var to NULL for fixed variables anymore; it may also return a
  multi-aggregated variable instead of aborting with an error message
- method SCIPgetBinvarRepresentative() now returns the fixed or multi-aggregated variable instead of returning
  NULL or aborting with an error message
- new method SCIPvarGetOrigvarSum()
- method SCIPdispDecimal() is replaced by SCIPdispInt() and SCIPdispLongint()

plugins:
- new implementation of the feasibility pump heuristic by Timo Berthold (replaces old implementation);
  old implementation is now called "objfeaspump"; parameter names have been changed accordingly
- diving heuristics now compare their number of LP iterations with the number of node LP iterations instead of the
  total number (including their own) LP iterations
- new plugin: probing presolver
- new plugin: clique separator for clique cuts with at least 3 elements
- changed implementation of reliability value calculation in reliability branching; slightly modified influence
  of maximal total number of strong branching LP iterations in reliability branching
- changed implementation of maximal strong branching iterations calculation in reliability branching
- modified the automatic objfactor setting of feaspump heuristic to let the objective function have stronger influence
- changed implementation of automatic minplungedepth and maxplungedepth calculation in bfs node selector
- new plugin: implied bound cuts separator
- during probing, propagation of bounds is now always performed in linear constraint handler, ignoring the
  parameter "tightenboundsfreq"
- new implementation of the clique graph construction method in clique separator

parameters:
- new parameters lp/cleanupcolsroot and lp/cleanuprowsroot to distinguish cleanup settings between root node and other
  nodes
- new parameters heuristics/fixandinfer/proprounds and heuristics/fixandinfer/minfixings
- default frequency offset of fracdiving heuristic changed to 3
- default frequency offset of (new) feaspump heuristic changed to 0
- default frequency offset of objfeaspump heuristic changed to 8
- changed default priority of primal heuristics
- renamed parameter limits/sol to limits/solutions
- changed default check priority of knapsack constraint handler to -600000
- new parameters separating/.../delay
- new parameters presolving/.../delay
- new parameters propagating/.../delay
- new parameters constraints/.../delaysepa
- new parameters constraints/.../delayprop
- new parameters constraints/.../delaypresol
- changed default priority of Gomory cut separator to -1000 (will now be called after constraint handlers!)
- changed default priority of strong CG cut separator to -2000
- changed default priority of cmir cut separator to -3000
- new parameters lp/initalgorithm and lp/resolvealgorithm for switching between simplex and barrier algorithm
- new parameter numerics/barrierconvtol to set the convergence tolerance in the barrier algorithm
- new parameter lp/pricing to set the pricing strategy used in the LP solver
- changed default of parameter lp/pricing to 's'teepest edge pricing
- new parameter lp/checkstability to disable stability check of LP solver's result code
- default parameter branching/relpscost/minreliable changed to 1.0
- default parameter branching/relpscost/maxlookahead changed to 8
- default parameter branching/relpscost/sbiterofs changed to 100000
- default parameter heuristics/coefdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/fracdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/guideddiving/maxlpiterquot changed to 0.05
- default parameter heuristics/linesearchdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/pscostdiving/maxlpiterquot changed to 0.05
- default parameter heuristics/feaspump/freq changed to 20
- default parameter heuristics/objfeaspump/freq changed to 20
- default parameter heuristics/objpscostdiving/freq changed to 20
- default parameter heuristics/rootsoldiving/freq changed to 20
- new parameter conflict/dynamic
- new parameter conflict/removeable
- new parameter reading/mpsreader/dynamicconss
- new parameter reading/cnfreader/dynamicconss
- new parameter heuristics/coefdiving/maxlpiterofs
- new parameter heuristics/feaspump/maxlpiterofs
- new parameter heuristics/fracdiving/maxlpiterofs
- new parameter heuristics/guideddiving/maxlpiterofs
- new parameter heuristics/linesearchdiving/maxlpiterofs
- new parameter heuristics/objfeaspump/maxlpiterofs
- new parameter heuristics/objpscostdiving/maxlpiterofs
- new parameter heuristics/pscostdiving/maxlpiterofs
- new parameter heuristics/rootsoldiving/maxlpiterofs
- new parameter heuristics/feaspump/maxsols
- new parameter heuristics/objfeaspump/maxsols
- new parameter heuristics/objpscostdiving/maxsols
- new parameter heuristics/rootsoldiving/maxsols
- new parameter branching/scorefunc
- default parameter separating/clique/maxtreenodes changed to -1

features:
- aging and cleanup now only remove non-basic columns and basic rows, s.t. resolving can be applied with 0 simplex
  iterations
- calling SCIPaddCut() with forcecut=TRUE will add the cut to the LP even if it is redundant
- command line history in interactive shell now only stores "useful" commands
- probing is now also possible in presolving stage
- it is now possible to create subnodes in probing and use backtracking to undo probing changes
- it is now possible to interrupt and continue presolving
- bounds of variables are included in the feasibility checks for solutions
- support for barrier algorithm
- added TSP example in examples/TSP
- SCIPaddVarImplication() now also adds variable lower and upper bounds, if the implied variable is non-binary
- removed storing of dual norms in LPI state of CPLEX interface (too memory consuming)
- included debugging module to check whether cutting planes cut off the optimal solution
- if verblevel is at least NORMAL, an automatical check of the best solution is performed in the original problem,
  and an error message is displayed, if it violates an original constraint

fixed bugs:
- fixed bug in MPS file reader
- fixed bugs in separation store with single coefficient cuts that are converted into bound changes
- at least one cut per separation round is added to the LP to avoid cycling, even if the cut is redundant
- removed bug with applying reduced cost strengthening before pricing in all necessary variables
- negated variables must also be reset in SCIPvarInitSolve()
- removed bug with objective norm calculation and column variables not in the LP (pricing)
- removed conflict analysis of infeasible diving LP if pricing is activated
- removed bug in knapsack constraint handler with merging multiple items if more than two items of the same
  variable appear in the constraint
- fixed bug in SCIProwCalcIntegralScalar() with rows consisting of only continuous variables (appeared in
  gomory cut separator on miplib/dcmulti.mps)
- fixed documentation of CONSLOCK-method (missing parameter "scip" in SCIPaddVarLocks())
- included missing "objrelax.h" in includes of objscip.h
- fixed bug that presolving time is not counted to solving time, if presolving is called explicitly with SCIPpresolve()
- fixed bug where presolving fixings are counted even if the variable was already fixed
- fixed bug that CONSLOCK method of constraint handlers that don't need constraints is not called
- fixed bug that after a resolve and further preprocessing, existing primal solutions may get corrupted due to
  aggregations or fixings that are possible due to the primal bound (given by the best solution)
- fixeg bug in setppc constraint handler with pairs of aggregated variables in the same constraint
- removed bug with dual presolver, that declared a problem to be unbounded or infeasible, if it could fix a variable
  to infinity even if its objective value is zero
- fixed bug in knapsack constraint handler that fixed variables are sometimes not removed in presolving
- made conflict analysis available in presolving stage (for probing conflicts)
- removed bug in knapsack constraint handler with merging negated variables of equal weight at the end of the variables'
  array
- fixed bug with primal bound becoming wrong, if in a prior run the optimal solution was found and the cutoff bound was
  thereby reduced due to further domain propagation w.r.t. the objective function
- fixed bug with unresolved numerical troubles in LP that don't render the LP useless at the current node
- fixed bug in SCIPisObjIntegral()
- LP error on forced LP resolve (due to 0 unfixed integers) now leads to an error (instead of accepting the pseudo solution as feasible)
- fixed bug in SCIPprintError() with file == NULL
- fixed bug with globally deleting constraints, that have attached rows which are therefore not released in exitsol methods
- fixed bugs in intobj separator
- fixed bug in CPLEX LP interface with dual norms
- heuristic's display character is now only shown the first time, the new solution was found
- fixed bug that SCIPreadProb() doesn't discard the transformed problem
- fixed bug in cmir separator with empty rows
- fixed bug in linear constraint handler's knapsack relaxation separator
- fixed numerical bugs in rounding heuristic and rootsoldiving heuristic
- fixed bug in implied bound cut separator: only implications between binary variables were generated before
- fixed bug in linear constraint handler with eventdatas, if the original constraint has no variables
- fixed bug with wrong euclidean norm calculation of row, if multiple coefficients for the same variable are added
  and the sorting of the row was delayed with SCIProwDelaySort()
- fixed bug with adding implications: wrong insertion position, if only the lower bound change was present but not
  the upper bound change
- fixed bug in SCIPvarAddImplics() with wrong variable used in varAdjustBd()
- fixed bug in method reduced() of tclique_branch.c with sorting nodes in V


SCIP version 0.78
=================

interface:
- new method SCIPvarIsInLP()
- new methods SCIPgetLPColumnObjval() and SCIPgetLPLooseObjval()
- new method SCIPcalcIntegralScalar() with arbitrary array of Real values
- new plugin class for relaxators (external relaxations, that can be used in parallel with LP relaxations)
- if more than one result code applies to a plugin's execution, it should return the one that is higher in the
  call's documentation list
- new method SCIPaddCoefKnapsack() in knapsack constraint handler
- removed SCIPisFeasible(); use !SCIPisFeasNegative() instead
- methods SCIPisIntegral(), SCIPisFracIntegral(), SCIPfloor(), SCIPceil(), and SCIPfrac() don't use the
  feasibility tolerance anymore (default: 1e-06); instead, they are using epsilon (default: 1e-09);
  instead, for handling integrality of a variable "in feasibility tolerances", new methods SCIPisFeasIntegral(),
  SCIPisFeasFracIntegral(), SCIPfeasFloor(), SCIPfeasCeil(), and SCIPfeasFrac() should be used
- new method SCIPisScalingIntegral() to check, whether the scaling of a value would lead to an integral value,
  measured against epsilon which is also scaled by the same scalar
- new methods SCIPgetRealarrayMinIdx(), SCIPgetRealarrayMaxIdx(), SCIPgetIntarrayMinIdx(), SCIPgetIntarrayMaxIdx(),
  SCIPgetBoolarrayMinIdx(), SCIPgetBoolarrayMaxIdx(), SCIPgetPtrarrayMinIdx(), and SCIPgetPtrarrayMaxIdx()
- new methods SCIPbsortPtrInt(), and SCIPbsortPtrIntInt()
- in LPI, the semantics of SCIPlpiHasPrimalRay() and SCIPlpiHasDualRay() changed:
  methods return TRUE, if a ray exists and the solver can return it;
  new methods SCIPlpiExistsPrimalRay() and SCIPlpiExistsDualRay() check whether a ray exists without checking, if
  the solver knows and can return the ray
- new method SCIPvarWasFixedAtIndex()
- new method SCIPaddConflictBd()
- even in optimized mode, the simple functions that are implemented as defines in the include files exist in the library,
  s.t. one can include the include files without NDEBUG and use the optimized library
- new method SCIPprintMemoryDiagnostic()
- new methods SCIPfindObj...() and SCIPgetObj...() in C++ wrapper interface to get the corresponding plugin object
- new branching rule plugin methods INITSOL and EXITSOL

parameters:
- slightly changed the meaning of parameter presolving/abortfac: a value of 0 now means to abort presolving only
  after no more change has been found

features:
- changed SCIProwCalcIntegralScalar() to a slightly different algorithm
- improved knapsack relaxation in linear constraint handler separator to scale the constraint in order to get
  integral coefficients instead of just rounding down all coefficients
- improved presolving of linear constraint handler: aggregation of two constraints with equal coefficient vector
  into single constraint
- improved presolving of knapsack constraint handler: aggregation of equal or negated variables in same constraint
- priority of separators, propagators, and presolvers decide whether the plugin is called before the corresponding
  constraint handler methods or after: plugins with nonnegative priorities are called before, plugins with negative
  priorities are called after the constraint handlers

fixed bugs:
- removed bug in knapsack constraint handler that appears if a variable is fixed to zero in knapsack presolving,
  which triggers a variable of the same knapsack to be fixed to one due to aggregation
- fixed bugs in consdataSwitchWatchedVars() of "or" and "and" constraint handlers
- fixed bug in all-fullstrong branching with getting strong branching information for columns not in current LP
- assigning a value to a fixed variable in a solution with SCIPsetSolVal() does not return an error anymore, if the value
  is equal to the fixed value of the variable
- implemented missing case in solve.c with branching rules that add constraints
- solving loop is now immediately aborted, if a node on the active path is marked to be cut off
- removed bug in resolving an interrupted problem, after the last solved node was cut off
- removed bug with infinite solving loop if LP solving is turned off
- removed bug in knapsack presolver
- removed bug with aborted solving in root node (e.g. due to time limit) that is tagged to be restarted
- changed numerics for integrality check of coefficients (fixed bug with accumulated errors in rows s.t. the
  row's activity is no longer integral although the row is marked being integer)
- fixed bugs in constraint handlers (and, logicor, or, setppc, xor) with calling conflict analysis during presolving
- slightly changed numerics in linear constraint handler presolving to fix a bug with coefficients detected to be
  scaled to an integral value, that are not integral after scaling due to a large scalar that increased the integrality
  gap to a value larger than epsilon
- fixed wrong assertion in xor constraint handler with switching both watched variables to unwatched
- removed bug in SCIPisScalingIntegral()
- removed bugs with calling SCIPtightenVarLb(), SCIPtightenVarUb(), SCIPinferVarLbCons(), SCIPinferVarUbCons(),
  SCIPinferVarLbProp(), and SCIPinferVarUbProp() in PROBLEM stage
- fixed bug in presolving with wrong number of newly fixed/aggregated/... variables/bounds/... after a restart


SCIP version 0.77
=================

installation:
- the file names in the archive file are now preceeded with a directory "scip-<version>/"
- the compiler is now also represented in the LP solver library names
  (e.g. you have to rename the softlink "libcplex.linux.x86.a" to "libcplex.linux.x86.gnu.a")

interface:
- added methods SCIPgetVarsLogicor() and SCIPgetNVarsLogicor() in logic or constraint handler
- methode SCIPgetGap() and SCIPgetTransGap() now return infinity, if primal and dual bound have opposite sign
  (this removes the oddness with the gap increasing while the dual bound approaches zero)

parameters:
- lp/colagelimit and lp/rowagelimit may now be set to -1 to disable deletion of columns/rows due to aging

features:
- infeasible LPs in diving now produce conflict clauses (if LP conflict analysis is enabled)
- conflict analysis was slightly modified
- slightly changed aging strategy of logic or constraint handler

fixed bugs:
- removed bug in conflict analysis that appears if the conflict is only active at the current depth level
- missing SCIPlpiIsPrimalFeasible() and SCIPlpiIsDualFeasible() implemented in lpi_spx.cpp and lpi_spx121.cpp
- removed preprocessing of linear constraint pairs with modifiable constraints
- removed wrong assert "assert(eventfilter->len == 0 || eventfilter->eventmask != 0x00000000)" from event.c
- removed wrong assert in conflict analysis (appeared on analyzing diving LP conflicts with both bounds of a non-binary
  variable changed)


SCIP version 0.76
=================

interface:
- new method SCIPchgVarBranchDirection()
- new method SCIPvarGetBranchDirection()
- new possible result code SCIP_DELAYED for primal heuristics
- changed SCIPcatchVarEvent() and SCIPdropVarEvent()
- method SCIPstage() is now called SCIPgetStage()
- method SCIPprintStatus() is now called SCIPprintStage()
- new method SCIPgetStatus() returns the solution status
- new method SCIPprintStatus() outputs the solution status
  (beware, that the old SCIPprintStatus() method is now called SCIPprintStage())

plugins:
- new method SCIPgetActivityLinear() in linear constraint handler
- new method SCIPgetFeasibilityLinear() in linear constraint handler

parameters:
- new parameter separating/efficacynorm to choose between Euclidean, maximum, sum, and discrete norm
  in efficacy calculation
- changed default frequency offset of pscostdiving (heuristics/pscostdiving/freqofs) to 2,
  and frequency offset of fracdiving (heuristics/feaspump/freqofs) to 0 in order to not call pscostdiving
  in root node, where nearly all pseudo costs are uninitialized

features:
- creation of reconvergence clauses in conflict analysis
- first node of each plunging is not treated as plunging node w.r.t. calling primal heuristics
- improved performance of logic or constraint handler due to better watched variables handling

fixed bugs:
- removed bugs in CLP Solver interface
- SCIP returned "gap limit reached" even if the problem was solved to optimality, if the
  optimal solution was found at a node with lower bound equal to the global lower bound
- after conversion of the focus node into a junction (e.g. in case of numerical troubles while solving the node's LP),
  the child nodes got the wrong LP fork attached (the common LP fork of the old and new focus node instead of the
  old focus node's LP fork)
- bug reconvergence clauses in conflict analysis if bounds on non-binary variables were the reason for the fixing of
  the uip to create a reconvergence clause for
- wrong sub calls in SCIPvarGet...CurrentRun() for aggregated variables
- variables' conflict set counter was not reset when the problem was resolved again

known bugs (still not fixed):
- unbounded models lead to an error
- air04 and air05 return wrong optimal value (1 too large): possibly due to strong branching or setppc propagation?


SCIP version 0.75
=================
- started change log
