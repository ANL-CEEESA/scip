current version
===============

interface:
- constraint handler callback methods CONSLOCK and CONSUNLOCK are replaced by a single method CONSLOCK with the
  number of locks being positive or negative
- methods SCIPvarLock(), SCIPvarLockDown(), SCIPvarLockUp(), SCIPvarLockBoth(), SCIPvarUnlock(), SCIPvarUnlockDown(),
  SCIPvarUnlockUp(), and SCIPvarUnlockBoth() are replaced by SCIPaddVarLocks() which returns a RETCODE
- methods SCIPvarLockDownCons(), SCIPvarLockUpCons(), SCIPvarUnlockDownCons(), and SCIPvarUnlockUpCons() are
  replaced by SCIPlockVarCons() and SCIPunlockVarCons() which return a RETCODE
- methods SCIPlockConsVars() and SCIPunlockConsVars() replaced with method SCIPaddConsLocks()
- additional parameter "maxproprounds" in SCIPpropagateProbing()
- changed memory interface (see memory.h), MEMHDR is now called BLKMEM
- additional parameter "aggregated" in SCIPmultiaggregateVars()
- new method SCIPgetObjNorm()
- new methods SCIPvarGetLbOriginal() and SCIPvarGetUbOriginal() for original problem variables
- methods SCIPvarGetLbGlobal(), SCIPvarGetUbGlobal(), SCIPvarGetLbLocal(), and SCIPvarGetUbLocal() now return the
  corresponding values of the transformed problem or current subproblem  even for original problem variables
- removed method SCIPsolGetObj() - use SCIPgetSolOrigObj() or SCIPgetSolTransObj() instead
- additional parameter "checkbounds" for SCIPtrySol(), SCIPtrySolFree(), SCIPcheckSol()
- new method SCIPcreateOrigSol()
- new method SCIPwriteImplicationConflictGraph()
- new callback methods INITSOL and EXITSOL for variable pricers, primal heuristics, conflict handlers,
  relaxators, separators, propagators, event handlers, node selectors, and display columns
- new parameter delay for presolvers
- new parameter delaypresol for constraint handlers
- new possible result SCIP_DELAYED for EXEC method of separators, presolvers, and propagators,
  and SEPA, PROP, and PRESOL methods of constraint handlers
- new methods SCIPsepaIsDelayed(), SCIPsepaWasDelayed(), SCIPpropIsDelayed(), SCIPpropWasDelayed(), SCIPpresolIsDelayed(),
  SCIPpresolWasDelayed(), SCIPconshdlrIsSeparationDelayed(), SCIPconshdlrIsPropagationDelayed(), 
  SCIPconshdlrIsPresolvingDelayed(), SCIPconshdlrWasSeparationDelayed(), SCIPconshdlrWasPropagationDelayed(), and
  SCIPconshdlrWasPresolvingDelayed()
- new method SCIPinProbing()
- new method SCIPgetProbName()
- source code was moved into subdirectories: replace includes #include "scip.h" by #include "scip/scip.h" and
  #include "objscip.h" by #include "objscip/objscip.h";
  This should allow a user to have include files of the same name as the ones of SCIP, e.g. "tree.h" or "var.h".
- method SCIPreadProb() does not free the current problem - this is done in SCIPcreateProb() now, which is usually
  called by a problem reader; in this way, a reader can generate "extra information" for the current problem, s.t.
  the full problem information can be distributed to different files read by different readers

plugins:
- new implementation of the feasibility pump heuristic by Timo Berthold (replaces old implementation);
  old implementation is now called "objfeaspump"; parameter names have been changed accordingly
- diving heuristics now compare their number of LP iterations with the number of node LP iterations instead of the
  total number (including their own) LP iterations

parameters:
- new parameters lp/cleanupcolsroot and lp/cleanuprowsroot to distinguish cleanup settings between root node and other
  nodes
- new parameters heuristics/fixandinfer/proprounds and heuristics/fixandinfer/minfixings
- default frequency offset of fracdiving heuristic changed to 3
- default frequency offset of (new) feaspump heuristic changed to 0
- default frequency offset of objfeaspump heuristic changed to 8
- changed default priority of primal heuristics
- renamed parameter limits/sol to limits/solutions
- changed default check priority of knapsack constraint handler to -600000
- new parameters separating/.../delay
- new parameters presolving/.../delay
- new parameters propagating/.../delay
- new parameters constraints/.../delaysepa
- new parameters constraints/.../delayprop
- new parameters constraints/.../delaypresol
- changed default priority of Gomory cut separator to -1000 (will now be called after constraint handlers!)
- changed default priority of strong CG cut separator to -2000
- changed default priority of cmir cut separator to -3000

features:
- aging and cleanup now only remove non-basic columns and basic rows, s.t. resolving can be applied with 0 simplex
  iterations
- calling SCIPaddCut() with forcecut=TRUE will add the cut to the LP even if it is redundant
- command line history in interactive shell now only stores "useful" commands
- new plugin: Probing Presolver
- probing is now also possible in presolving stage
- it is now possible to create subnodes in probing and use backtracking to undo probing changes
- it is now possible to interrupt and continue presolving
- bounds of variables are included in the feasibility checks for solutions

fixed bugs:
- fixed bug in MPS file reader
- fixed bugs in separation store with single coefficient cuts that are converted into bound changes
- at least one cut per separation round is added to the LP to avoid cycling, even if the cut is redundant
- removed bug with applying reduced cost strengthening before pricing in all necessary variables
- negated variables must also be reset in SCIPvarInitSolve()
- removed bug with objective norm calculation and column variables not in the LP (pricing)
- removed conflict analysis of infeasible diving LP if pricing is activated
- removed bug in knapsack constraint handler with merging multiple items if more than two items of the same
  variable appear in the constraint
- fixed bug in SCIProwCalcIntegralScalar() with rows consisting of only continuous variables (appeared in
  gomory cut separator on miplib/dcmulti.mps)
- fixed documentation of CONSLOCK-method (missing parameter "scip" in SCIPaddVarLocks())
- included missing "objrelax.h" in includes of objscip.h
- fixed bug that presolving time is not counted to solving time, if presolving is called explicitly with SCIPpresolve()
- fixed bug where presolving fixings are counted even if the variable was already fixed
- fixed bug that CONSLOCK method of constraint handlers that don't need constraints is not called
- fixed bug that after a resolve and further preprocessing, existing primal solutions may get corrupted due to
  aggregations or fixings that are possible due to the primal bound (given by the best solution)
- fixeg bug in setppc constraint handler with pairs of aggregated variables in the same constraint
- removed bug with dual presolver, that declared a problem to be unbounded or infeasible, if it could fix a variable
  to infinity even if its objective value is zero
- fixed bug in knapsack constraint handler that fixed variables are sometimes not removed in presolving
- made conflict analysis available in presolving stage (for probing conflicts)
- removed bug in knapsack constraint handler with merging negated variables of equal weight at the end of the variables'
  array
- fixed bug with primal bound becoming wrong, if in a prior run the optimal solution was found and the cutoff bound was
  thereby reduced due to further domain propagation w.r.t. the objective function
- fixed bug with unresolved numerical troubles in LP that don't render the LP useless at the current node


SCIP version 0.78
=================

interface:
- new method SCIPvarIsInLP()
- new methods SCIPgetLPColumnObjval() and SCIPgetLPLooseObjval()
- new method SCIPcalcIntegralScalar() with arbitrary array of Real values
- new plugin class for relaxators (external relaxations, that can be used in parallel with LP relaxations)
- if more than one result code applies to a plugin's execution, it should return the one that is higher in the
  call's documentation list
- new method SCIPaddCoefKnapsack() in knapsack constraint handler
- removed SCIPisFeasible(); use !SCIPisFeasNegative() instead
- methods SCIPisIntegral(), SCIPisFracIntegral(), SCIPfloor(), SCIPceil(), and SCIPfrac() don't use the
  feasibility tolerance anymore (default: 1e-06); instead, they are using epsilon (default: 1e-09);
  instead, for handling integrality of a variable "in feasibility tolerances", new methods SCIPisFeasIntegral(),
  SCIPisFeasFracIntegral(), SCIPfeasFloor(), SCIPfeasCeil(), and SCIPfeasFrac() should be used
- new method SCIPisScalingIntegral() to check, whether the scaling of a value would lead to an integral value,
  measured against epsilon which is also scaled by the same scalar
- new methods SCIPgetRealarrayMinIdx(), SCIPgetRealarrayMaxIdx(), SCIPgetIntarrayMinIdx(), SCIPgetIntarrayMaxIdx(),
  SCIPgetBoolarrayMinIdx(), SCIPgetBoolarrayMaxIdx(), SCIPgetPtrarrayMinIdx(), and SCIPgetPtrarrayMaxIdx()
- new methods SCIPbsortPtrInt(), and SCIPbsortPtrIntInt()
- in LPI, the semantics of SCIPlpiHasPrimalRay() and SCIPlpiHasDualRay() changed:
  methods return TRUE, if a ray exists and the solver can return it;
  new methods SCIPlpiExistsPrimalRay() and SCIPlpiExistsDualRay() check whether a ray exists without checking, if
  the solver knows and can return the ray
- new method SCIPvarWasFixedAtIndex()
- new method SCIPaddConflictBd()
- even in optimized mode, the simple functions that are implemented as defines in the include files exist in the library,
  s.t. one can include the include files without NDEBUG and use the optimized library
- new method SCIPprintMemoryDiagnostic()
- new methods SCIPfindObj...() and SCIPgetObj...() in C++ wrapper interface to get the corresponding plugin object
- new branching rule plugin methods INITSOL and EXITSOL

parameters:
- slightly changed the meaning of parameter presolving/abortfac: a value of 0 now means to abort presolving only
  after no more change has been found

features:
- changed SCIProwCalcIntegralScalar() to a slightly different algorithm
- improved knapsack relaxation in linear constraint handler separator to scale the constraint in order to get
  integral coefficients instead of just rounding down all coefficients
- improved presolving of linear constraint handler: aggregation of two constraints with equal coefficient vector
  into single constraint
- improved presolving of knapsack constraint handler: aggregation of equal or negated variables in same constraint
- priority of separators, propagators, and presolvers decide whether the plugin is called before the corresponding
  constraint handler methods or after: plugins with nonnegative priorities are called before, plugins with negative
  priorities are called after the constraint handlers

fixed bugs:
- removed bug in knapsack constraint handler that appears if a variable is fixed to zero in knapsack presolving,
  which triggers a variable of the same knapsack to be fixed to one due to aggregation
- fixed bugs in consdataSwitchWatchedVars() of "or" and "and" constraint handlers
- fixed bug in all-fullstrong branching with getting strong branching information for columns not in current LP
- assigning a value to a fixed variable in a solution with SCIPsetSolVal() does not return an error anymore, if the value
  is equal to the fixed value of the variable
- implemented missing case in solve.c with branching rules that add constraints
- solving loop is now immediately aborted, if a node on the active path is marked to be cut off
- removed bug in resolving an interrupted problem, after the last solved node was cut off
- removed bug with infinite solving loop if LP solving is turned off
- removed bug in knapsack presolver
- removed bug with aborted solving in root node (e.g. due to time limit) that is tagged to be restarted
- changed numerics for integrality check of coefficients (fixed bug with accumulated errors in rows s.t. the
  row's activity is no longer integral although the row is marked being integer)
- fixed bugs in constraint handlers (and, logicor, or, setppc, xor) with calling conflict analysis during presolving
- slightly changed numerics in linear constraint handler presolving to fix a bug with coefficients detected to be
  scaled to an integral value, that are not integral after scaling due to a large scalar that increased the integrality
  gap to a value larger than epsilon
- fixed wrong assertion in xor constraint handler with switching both watched variables to unwatched
- removed bug in SCIPisScalingIntegral()
- removed bugs with calling SCIPtightenVarLb(), SCIPtightenVarUb(), SCIPinferVarLbCons(), SCIPinferVarUbCons(),
  SCIPinferVarLbProp(), and SCIPinferVarUbProp() in PROBLEM stage
- fixed bug in presolving with wrong number of newly fixed/aggregated/... variables/bounds/... after a restart


SCIP version 0.77
=================

installation:
- the file names in the archive file are now preceeded with a directory "scip-<version>/"
- the compiler is now also represented in the LP solver library names
  (e.g. you have to rename the softlink "libcplex.linux.x86.a" to "libcplex.linux.x86.gnu.a")

interface:
- added methods SCIPgetVarsLogicor() and SCIPgetNVarsLogicor() in logic or constraint handler
- methode SCIPgetGap() and SCIPgetTransGap() now return infinity, if primal and dual bound have opposite sign
  (this removes the oddness with the gap increasing while the dual bound approaches zero)

parameters:
- lp/colagelimit and lp/rowagelimit may now be set to -1 to disable deletion of columns/rows due to aging

features:
- infeasible LPs in diving now produce conflict clauses (if LP conflict analysis is enabled)
- conflict analysis was slightly modified
- slightly changed aging strategy of logic or constraint handler

fixed bugs:
- removed bug in conflict analysis that appears if the conflict is only active at the current depth level
- missing SCIPlpiIsPrimalFeasible() and SCIPlpiIsDualFeasible() implemented in lpi_spx.cpp and lpi_spx121.cpp
- removed preprocessing of linear constraint pairs with modifiable constraints
- removed wrong assert "assert(eventfilter->len == 0 || eventfilter->eventmask != 0x00000000)" from event.c
- removed wrong assert in conflict analysis (appeared on analyzing diving LP conflicts with both bounds of a non-binary
  variable changed)


SCIP version 0.76
=================

interface:
- new method SCIPchgVarBranchDirection()
- new method SCIPvarGetBranchDirection()
- new possible result code SCIP_DELAYED for primal heuristics
- changed SCIPcatchVarEvent() and SCIPdropVarEvent()
- method SCIPstage() is now called SCIPgetStage()
- method SCIPprintStatus() is now called SCIPprintStage()
- new method SCIPgetStatus() returns the solution status
- new method SCIPprintStatus() outputs the solution status
  (beware, that the old SCIPprintStatus() method is now called SCIPprintStage())

plugins:
- new method SCIPgetActivityLinear() in linear constraint handler
- new method SCIPgetFeasibilityLinear() in linear constraint handler

parameters:
- new parameter separating/efficacynorm to choose between Euclidean, maximum, sum, and discrete norm
  in efficacy calculation
- changed default frequency offset of pscostdiving (heuristics/pscostdiving/freqofs) to 2,
  and frequency offset of fracdiving (heuristics/feaspump/freqofs) to 0 in order to not call pscostdiving
  in root node, where nearly all pseudo costs are uninitialized

features:
- creation of reconvergence clauses in conflict analysis
- first node of each plunging is not treated as plunging node w.r.t. calling primal heuristics
- improved performance of logic or constraint handler due to better watched variables handling

fixed bugs:
- removed bugs in CLP Solver interface
- SCIP returned "gap limit reached" even if the problem was solved to optimality, if the
  optimal solution was found at a node with lower bound equal to the global lower bound
- after conversion of the focus node into a junction (e.g. in case of numerical troubles while solving the node's LP),
  the child nodes got the wrong LP fork attached (the common LP fork of the old and new focus node instead of the
  old focus node's LP fork)
- bug reconvergence clauses in conflict analysis if bounds on non-binary variables were the reason for the fixing of
  the uip to create a reconvergence clause for
- wrong sub calls in SCIPvarGet...CurrentRun() for aggregated variables
- variables' conflict set counter was not reset when the problem was resolved again

known bugs (still not fixed):
- unbounded models lead to an error
- air04 and air05 return wrong optimal value (1 too large): possibly due to strong branching or setppc propagation?


SCIP version 0.75
=================
- started change log
