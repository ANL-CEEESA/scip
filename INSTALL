* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                           *
*                  This file is part of the program and library             *
*         SCIP --- Solving Constraint Integer Programs                      *
*                                                                           *
*    Copyright (C) 2002-2002 Tobias Achterberg                              *
*                            Thorsten Koch                                  *
*                  2002-2002 Konrad-Zuse-Zentrum                            *
*                            fuer Informationstechnik Berlin                *
*                                                                           *
*  SCIP is distributed under the terms of the SCIP Academic Licence.        *
*                                                                           *
*  You should have received a copy of the SCIP Academic License             *
*  along with SCIP; see the file COPYING. If not email to scip@zib.de.      *
*                                                                           *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

In the following, some of the names depend on your machine and your
compilation settings:

- $(PAR):    sequential or parallel version
             always "seq", parallel version is not yet implemented

- $(OSTYPE): the operating system
             the string returned by "uname -s" in lower case

- $(ARCH):   the architecture
             the string returned by "uname -m", modified by the following
             rules to subsume some architectures:
              - "sun??" is replaced by "sparc"
              - "i?86" is replaced by "x86"
              - "IP??" is replaced by "mips"
              - "9000????" is replaced by "hppa"
              - "00??????????" is replaced by "pwr4"

- $(COMP):   the compiler
             "gnu", "intel", "compaq", "sun", "insure", ... (see make/ dir)

- $(OPT):    the optimization level of compilation
             "dbg", "opt", or "prf"

For example, if you want to install sequential SCIP on a Linux system
with a x86 processor using the gnu compiler in debug mode, you would have
the following names:
- $(PAR)    = seq
- $(OSTYPE) = linux
- $(ARCH)   = x86
- $(COMP)   = gnu
- $(OPT)    = dbg

-----------------------------------------------------------------------------

Here is what you have to do to get SCIP running:

1. Create necessary softlinks in lib/ directory:
   (a) to use CPLEX
       - ln -s <path to directory of cplex.h> lib/cpxinc
       - ln -s <file libcplex.a> lib/libcplex.$(OSTYPE).$(ARCH).a
         for each operation system and architecture to use
         (e.g. "ln -s /cplex/libcplex.a lib/libcplex.linux.x86.a")
   (b) to use SOPLEX (not yet implemented!)
       - ln -s <path to SOPLEX' *.h files> lib/spxinc
       - ln -s <file libsoplex.*.a> lib/libsoplex.$(OSTYPE).$(ARCH).$(COMP).$(OPT)
         for each operating system, architecture, compiler and optimization level
         to use
         (e.g. "ln -s /soplex/libsoplex.linux.x86.gnu.dbg.a lib/libsoplex.linux.x86.gnu.dbg.a")

2. Compile the library and the solver program:
   In your SCIP main directory, enter "gmake OPT=<...> LPS=<...> COMP=<...>" with
   the following options:
   - "OPT=dbg"  to use debug compilation mode (default)
   - "OPT=opt"  to use optimized compilation mode
   - "OPT=prf"  to use performance analysis compilation mode
   - "LPS=cpx"  to use CPLEX as LP solver (default)
   - "LPS=spx"  to use SOPLEX as LP solver (not yet implemented!)
   - "COMP=gnu" to use GNU c/c++ compiler (default)
   - other compilers are available (see make/ directory)

3. To run the program enter "bin/scip.$(PAR).$(OSTYPE).$(ARCH).$(COMP).$(OPT)"
   (e.g. "bin/scip.seq.linux.x86.gnu.dbg.cpx")

3. To generate the documentation, you need to have doxygen installed, and
   enter "gmake doc"

4. To check the code with lint, you need to have flexelint installed, and
   enter "gmake lint"

