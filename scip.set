# verbosity level of output
# [type: int, range: [0,4], default: 2]
display/verblevel = 4

# maximal number of characters in a node information line
# [type: int, range: [0,2147483647], default: 139]
display/dispwidth = 139

# frequency for displaying node information lines
# [type: int, range: [-1,2147483647], default: 100]
display/dispfreq = 100

# frequency for displaying header lines (every n'th node information line)
# [type: int, range: [-1,2147483647], default: 15]
display/dispheaderfreq = 15

# values larger than this are considered infinity
# [type: real, range: [10000000000,1e+98], default: 1e+20]
numerics/infinity = 1e+20

# absolute values smaller than this are considered zero
# [type: real, range: [2.22044604925031e-16,0.001], default: 1e-09]
numerics/epsilon = 1e-09

# absolute values of sums smaller than this are considered zero
# [type: real, range: [2.22044604925031e-13,0.001], default: 1e-06]
numerics/sumepsilon = 1e-06

# LP feasibility tolerance for constraints
# [type: real, range: [2.22044604925031e-13,0.001], default: 1e-06]
numerics/feastol = 1e-06

# LP feasibility tolerance for reduced costs
# [type: real, range: [2.22044604925031e-13,0.001], default: 1e-09]
numerics/dualfeastol = 1e-09

# minimal improve for strengthening bounds
# [type: real, range: [2.22044604925031e-13,1e+98], default: 0.0001]
numerics/boundstreps = 0.0001

# epsilon for deciding if a cut is violated
# [type: real, range: [2.22044604925031e-13,1e+98], default: 0.05]
numerics/cutvioleps = 0.05

# epsilon for deciding if a cut is violated in the root node
# [type: real, range: [2.22044604925031e-13,1e+98], default: 0.0025]
numerics/cutviolepsroot = 0.0025

# minimal variable distance value to use for branching pseudo cost updates
# [type: real, range: [2.22044604925031e-13,1], default: 0.1]
numerics/pseudocosteps = 0.1

# minimal objective distance value to use for branching pseudo cost updates
# [type: real, range: [0,1.79769313486232e+308], default: 0.0001]
numerics/pseudocostdelta = 0.0001

# fraction of maximal memory usage resulting in switch to memory saving mode
# [type: real, range: [0,1], default: 0.8]
memory/memsavefac = 0.8

# memory growing factor for dynamically allocated arrays
# [type: real, range: [1,10], default: 1.2]
memory/memgrowfac = 1.2

# initial size of dynamically allocated arrays
# [type: int, range: [0,2147483647], default: 4]
memory/memgrowinit = 4

# memory growing factor for tree array
# [type: real, range: [1,10], default: 2]
memory/treegrowfac = 2

# initial size of tree array
# [type: int, range: [0,2147483647], default: 65536]
memory/treegrowinit = 65536

# memory growing factor for path array
# [type: real, range: [1,10], default: 2]
memory/pathgrowfac = 2

# initial size of path array
# [type: int, range: [0,2147483647], default: 256]
memory/pathgrowinit = 256

# branching score factor to weigh downward and upward gain prediction
# [type: real, range: [0,1], default: 0.167]
branching/branchscorefac = 0.167

# maximal number of presolving rounds (-1: unlimited)
# [type: int, range: [-1,2147483647], default: -1]
presolving/maxpresolrounds = -1

# abort presolve, if less than this fraction of the problem was changed in last presolve round
# [type: real, range: [0,1], default: 0.0001]
presolving/presolabortfac = 0.0001

# maximal number of variables priced in per pricing round
# [type: int, range: [1,2147483647], default: 100]
pricing/maxpricevars = 100

# maximal number of priced variables at the root node
# [type: int, range: [1,2147483647], default: 2000]
pricing/maxpricevarsroot = 2000

# pricing is aborted, if fac * maxpricevars pricing candidates were found
# [type: real, range: [1,1.79769313486232e+308], default: 2]
pricing/abortpricevarsfac = 2

# maximal number of propagation rounds per node (-1: unlimited)
# [type: int, range: [-1,2147483647], default: 100]
propagating/maxproprounds = 100

# maximal number of propagation rounds in the root node (-1: unlimited)
# [type: int, range: [-1,2147483647], default: 1000]
propagating/maxproproundsroot = 1000

# maximal number of cuts separated per separation round
# [type: int, range: [1,2147483647], default: 100]
separating/maxsepacuts = 100

# maximal number of separated cuts at the root node
# [type: int, range: [1,2147483647], default: 2000]
separating/maxsepacutsroot = 2000

# maximum age a cut can reach before it is deleted from the global cut pool, or -1 to keep all cuts
# [type: int, range: [-1,2147483647], default: 100]
separating/cutagelimit = 100

# maximum age an unnecessary constraint can reach before it is deleted, or -1 to keep all constraints
# [type: int, range: [-1,2147483647], default: 200]
constraints/consagelimit = 200

# age of a constraint after which it is marked obsolete, or -1 to not mark constraints obsolete
# [type: int, range: [-1,2147483647], default: 100]
constraints/consobsoleteage = 100

# should propagation conflict analysis be used?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
conflict/usepropconflict = TRUE

# should infeasible LP conflict analysis be used?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
conflict/uselpconflict = FALSE

# should infeasible strong branching conflict analysis be used?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
conflict/usesbconflict = FALSE

# should pseudo solution conflict analysis be used?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
conflict/usepseudoconflict = TRUE

# maximal fraction of binary variables involved in a conflict clause
# [type: real, range: [0,1.79769313486232e+308], default: 0.02]
conflict/maxconfvarsfac = 0.02

# minimal absolute maximum of variables involved in a conflict clause
# [type: int, range: [0,2147483647], default: 20]
conflict/minmaxconfvars = 20

# maximal number of nodes to process (-1: no limit)
# [type: longint, range: [-1,9223372036854775807], default: -1]
limits/nodelimit = -1

# maximal time in seconds to run
# [type: real, range: [0,1.79769313486232e+308], default: 1e+20]
limits/timelimit = 1e+20

# maximal memory usage in MB; reported memory usage is lower than real memory usage!
# [type: real, range: [0,1.79769313486232e+308], default: 1e+20]
limits/memlimit = 1e+20

# solving stops, if the gap = |(primalbound - dualbound)/dualbound| is below the given value
# [type: real, range: [0,1.79769313486232e+308], default: 0]
limits/gaplimit = 0

# solving stops, if the given number of solutions were found (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
limits/sollimit = -1

# maximal number of solutions to store in the solution storage
# [type: int, range: [1,2147483647], default: 100]
limits/maxsol = 100

# frequency for solving LP at the nodes (-1: never; 0: only root LP)
# [type: int, range: [-1,2147483647], default: 1]
lp/lpsolvefreq = 1

# maximal depth for solving LP at the nodes (-1: no depth limit)
# [type: int, range: [-1,2147483647], default: -1]
lp/lpsolvedepth = -1

# frequency for applying reduced cost fixing (-1: never; 0: only root LP)
# [type: int, range: [-1,2147483647], default: 5]
lp/redcostfreq = 5

# should LP solutions be checked, resolving LP when numerical troubles occur?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
lp/checklpfeas = TRUE

# should FASTMIP setting of LP solver be used?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
lp/fastmip = TRUE

# should scaling of LP solver be used?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
lp/scaling = TRUE

# should new non-basic columns be removed after LP solving?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
lp/cleanupcols = FALSE

# should new basic rows be removed after LP solving?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
lp/cleanuprows = TRUE

# maximum age a dynamic column can reach before it is deleted from the LP
# [type: int, range: [0,2147483647], default: 10]
lp/colagelimit = 10

# maximum age a dynamic row can reach before it is deleted from the LP
# [type: int, range: [0,2147483647], default: 10]
lp/rowagelimit = 10

# default clock type (1: CPU user seconds, 2: wall clock time)
# [type: int, range: [1,2], default: 1]
timing/clocktype = 1

# is timing enabled?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
timing/clocksenabled = TRUE

# should the CTRL-C interrupt be catched by SCIP?
# [type: bool, range: {TRUE,FALSE}, default: TRUE]
misc/catchctrlc = TRUE

# name of the VBC Tool output file, or - if no VBC Tool output should be created
# [type: string, default: "-"]
misc/vbcfilename = "-"

# priority of conflict handler <linear>
# [type: int, range: [-2147483648,2147483647], default: -1000000]
conflict/linear/priority = -1000000

# frequency for separating cuts of constraint handler <linear> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 5]
constraints/linear/sepafreq = 5

# frequency for propagating domains of constraint handler <linear> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 5]
constraints/linear/propfreq = 5

# multiplier on propagation frequency, how often the bounds are tightened (-1: never, 0: only at root)
# [type: int, range: [-1,2147483647], default: 1]
constraints/linear/tightenboundsfreq = 1

# maximal allowed relative gain in maximum norm for constraint aggregation
# [type: real, range: [0,1.79769313486232e+308], default: 5]
constraints/linear/maxaggrnormscale = 5

# frequency for separating cuts of constraint handler <and> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/and/sepafreq = 1

# frequency for propagating domains of constraint handler <and> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/and/propfreq = 1

# frequency for separating cuts of constraint handler <conjunction> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: -1]
constraints/conjunction/sepafreq = -1

# frequency for propagating domains of constraint handler <conjunction> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: -1]
constraints/conjunction/propfreq = -1

# frequency for separating cuts of constraint handler <integral> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: -1]
constraints/integral/sepafreq = -1

# frequency for propagating domains of constraint handler <integral> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: -1]
constraints/integral/propfreq = -1

# frequency for separating cuts of constraint handler <knapsack> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 10]
constraints/knapsack/sepafreq = 10

# frequency for propagating domains of constraint handler <knapsack> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/knapsack/propfreq = 1

# maximal number of separation rounds per node
# [type: int, range: [0,2147483647], default: 5]
constraints/knapsack/maxrounds = 5

# maximal number of separation rounds per node in the root node
# [type: int, range: [0,2147483647], default: 10]
constraints/knapsack/maxroundsroot = 10

# maximal number of cuts separated per separation round
# [type: int, range: [0,2147483647], default: 50]
constraints/knapsack/maxsepacuts = 50

# maximal number of cuts separated per separation round in the root node
# [type: int, range: [0,2147483647], default: 200]
constraints/knapsack/maxsepacutsroot = 200

# priority of conflict handler <logicor>
# [type: int, range: [-2147483648,2147483647], default: 800000]
conflict/logicor/priority = 800000

# frequency for separating cuts of constraint handler <logicor> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 5]
constraints/logicor/sepafreq = 5

# frequency for propagating domains of constraint handler <logicor> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/logicor/propfreq = 1

# number of children created in pseudo branching
# [type: int, range: [2,2147483647], default: 2]
constraints/logicor/npseudobranches = 2

# branching factor to weigh maximum of positive and negative variable uses
# [type: real, range: [-1.79769313486232e+308,1.79769313486232e+308], default: 1]
constraints/logicor/maxvarusefac = 1

# branching factor to weigh minimum of positive and negative variable uses
# [type: real, range: [-1.79769313486232e+308,1.79769313486232e+308], default: -0.2]
constraints/logicor/minvarusefac = -0.2

# frequency for separating cuts of constraint handler <or> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/or/sepafreq = 1

# frequency for propagating domains of constraint handler <or> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/or/propfreq = 1

# priority of conflict handler <setppc>
# [type: int, range: [-2147483648,2147483647], default: 700000]
conflict/setppc/priority = 700000

# frequency for separating cuts of constraint handler <setppc> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 5]
constraints/setppc/sepafreq = 5

# frequency for propagating domains of constraint handler <setppc> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/setppc/propfreq = 1

# number of children created in pseudo branching
# [type: int, range: [2,2147483647], default: 2]
constraints/setppc/npseudobranches = 2

# frequency for separating cuts of constraint handler <varbound> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/varbound/sepafreq = 1

# frequency for propagating domains of constraint handler <varbound> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
constraints/varbound/propfreq = 1

# should columns be added and removed dynamically to the LP?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
reading/cnfreader/dynamiccols = FALSE

# should rows be added and removed dynamically to the LP?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
reading/cnfreader/dynamicrows = FALSE

# should columns be added and removed dynamically to the LP?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
reading/mpsreader/dynamiccols = FALSE

# should rows be added and removed dynamically to the LP?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
reading/mpsreader/dynamicrows = FALSE

# priority of presolver <dualfix>
# [type: int, range: [-2147483648,2147483647], default: 100000]
presolving/dualfix/priority = 100000

# priority of presolver <trivial>
# [type: int, range: [-2147483648,2147483647], default: 9000000]
presolving/trivial/priority = 9000000

# priority of branching rule <bfs> in standard mode
# [type: int, range: [-2147483648,2147483647], default: 100000]
nodeselection/bfs/stdpriority = 100000

# priority of branching rule <bfs> in memory saving mode
# [type: int, range: [-2147483648,2147483647], default: 0]
nodeselection/bfs/memsavepriority = 0

# minimal plunging depth, before new best node may be selected
# [type: int, range: [0,2147483647], default: 5]
nodeselection/bfs/minplungedepth = 5

# maximal plunging depth, before new best node is forced to be selected
# [type: int, range: [0,2147483647], default: 25]
nodeselection/bfs/maxplungedepth = 25

# maximal quotient (curlowerbound - lowerbound)/(avglowerbound - lowerbound) where plunging is performed
# [type: real, range: [0,1.79769313486232e+308], default: 1.5]
nodeselection/bfs/maxplungequot = 1.5

# priority of branching rule <dfs> in standard mode
# [type: int, range: [-2147483648,2147483647], default: 0]
nodeselection/dfs/stdpriority = 0

# priority of branching rule <dfs> in memory saving mode
# [type: int, range: [-2147483648,2147483647], default: 100000]
nodeselection/dfs/memsavepriority = 100000

# priority of branching rule <restartdfs> in standard mode
# [type: int, range: [-2147483648,2147483647], default: 50000]
nodeselection/restartdfs/stdpriority = 50000

# priority of branching rule <restartdfs> in memory saving mode
# [type: int, range: [-2147483648,2147483647], default: 50000]
nodeselection/restartdfs/memsavepriority = 50000

# frequency for selecting the best node instead of the deepest one (0: never)
# [type: int, range: [0,2147483647], default: 1000]
nodeselection/restartdfs/selectbestfreq = 1000

# priority of branching rule <allfullstrong>
# [type: int, range: [-2147483648,2147483647], default: -1000]
branching/allfullstrong/priority = -1000

# maximal depth level, up to which branching rule <allfullstrong> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/allfullstrong/maxdepth = -1

# priority of branching rule <conffullstrong>
# [type: int, range: [-2147483648,2147483647], default: -100]
branching/conffullstrong/priority = -100

# maximal depth level, up to which branching rule <conffullstrong> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/conffullstrong/maxdepth = -1

# priority of branching rule <fullstrong>
# [type: int, range: [-2147483648,2147483647], default: 0]
branching/fullstrong/priority = 0

# maximal depth level, up to which branching rule <fullstrong> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/fullstrong/maxdepth = -1

# priority of branching rule <inference>
# [type: int, range: [-2147483648,2147483647], default: 1000]
branching/inference/priority = 1000

# maximal depth level, up to which branching rule <inference> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/inference/maxdepth = -1

# priority of branching rule <mostinf>
# [type: int, range: [-2147483648,2147483647], default: 100]
branching/mostinf/priority = 100

# maximal depth level, up to which branching rule <mostinf> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/mostinf/maxdepth = -1

# priority of branching rule <leastinf>
# [type: int, range: [-2147483648,2147483647], default: 50]
branching/leastinf/priority = 50

# maximal depth level, up to which branching rule <leastinf> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/leastinf/maxdepth = -1

# priority of branching rule <relpscost>
# [type: int, range: [-2147483648,2147483647], default: 10000]
branching/relpscost/priority = 10000

# maximal depth level, up to which branching rule <relpscost> should be used (-1 for no limit)
# [type: int, range: [-1,2147483647], default: -1]
branching/relpscost/maxdepth = -1

# minimal value for minimum pseudo cost size to regard pseudo cost value as reliable
# [type: real, range: [0,1.79769313486232e+308], default: 4]
branching/relpscost/minreliable = 4

# maximal value for minimum pseudo cost size to regard pseudo cost value as reliable
# [type: real, range: [0,1.79769313486232e+308], default: 16]
branching/relpscost/maxreliable = 16

# maximal fraction of strong branching LP iterations compared to node relaxation LP iterations
# [type: real, range: [0,1.79769313486232e+308], default: 0.5]
branching/relpscost/sbiterquot = 0.5

# additional number of allowed strong branching LP iterations
# [type: int, range: [0,2147483647], default: 10000]
branching/relpscost/sbiterofs = 10000

# maximal number of further variables evaluated without better score
# [type: int, range: [1,2147483647], default: 8]
branching/relpscost/maxlookahead = 8

# maximal number of candidates initialized with strong branching per node
# [type: int, range: [0,2147483647], default: 100]
branching/relpscost/initcand = 100

# iteration limit for strong branching initializations of pseudo cost entries (0: auto)
# [type: int, range: [0,2147483647], default: 0]
branching/relpscost/inititer = 0

# priority of heuristic <coefdiving>
# [type: int, range: [-2147483648,2147483647], default: -1001000]
heuristics/coefdiving/priority = -1001000

# frequency for calling primal heuristic <coefdiving> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 10]
heuristics/coefdiving/freq = 10

# frequency offset for calling primal heuristic <coefdiving>
# [type: int, range: [0,2147483647], default: 2]
heuristics/coefdiving/freqofs = 2

# maximal depth level to call primal heuristic <coefdiving> (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
heuristics/coefdiving/maxdepth = -1

# minimal relative depth to start diving
# [type: real, range: [0,1], default: 0.5]
heuristics/coefdiving/divestartdepth = 0.5

# maximal fraction of diving LP iterations compared to total iteration number
# [type: real, range: [0,1], default: 0.1]
heuristics/coefdiving/maxlpiterquot = 0.1

# maximal quotient (curlowerbound - lowerbound)/(upperbound - lowerbound) where diving is performed
# [type: real, range: [0,1], default: 0.8]
heuristics/coefdiving/maxdiveubquot = 0.8

# maximal quotient (curlowerbound - lowerbound)/(avglowerbound - lowerbound) where diving is performed
# [type: real, range: [0,1e+99], default: 4]
heuristics/coefdiving/maxdiveavgquot = 4

# maximal UBQUOT when no solution was found yet
# [type: real, range: [0,1], default: 0.1]
heuristics/coefdiving/maxdiveubquotnosol = 0.1

# maximal AVGQUOT when no solution was found yet
# [type: real, range: [0,1e+99], default: 8]
heuristics/coefdiving/maxdiveavgquotnosol = 8

# priority of heuristic <fracdiving>
# [type: int, range: [-2147483648,2147483647], default: -1000000]
heuristics/fracdiving/priority = -1000000

# frequency for calling primal heuristic <fracdiving> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 10]
heuristics/fracdiving/freq = 10

# frequency offset for calling primal heuristic <fracdiving>
# [type: int, range: [0,2147483647], default: 0]
heuristics/fracdiving/freqofs = 0

# maximal depth level to call primal heuristic <fracdiving> (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
heuristics/fracdiving/maxdepth = -1

# minimal relative depth to start diving
# [type: real, range: [0,1], default: 0.5]
heuristics/fracdiving/divestartdepth = 0.5

# maximal fraction of diving LP iterations compared to total iteration number
# [type: real, range: [0,1], default: 0.1]
heuristics/fracdiving/maxlpiterquot = 0.1

# maximal quotient (curlowerbound - lowerbound)/(upperbound - lowerbound) where diving is performed
# [type: real, range: [0,1], default: 0.8]
heuristics/fracdiving/maxdiveubquot = 0.8

# maximal quotient (curlowerbound - lowerbound)/(avglowerbound - lowerbound) where diving is performed
# [type: real, range: [0,1e+99], default: 4]
heuristics/fracdiving/maxdiveavgquot = 4

# maximal UBQUOT when no solution was found yet
# [type: real, range: [0,1], default: 0.1]
heuristics/fracdiving/maxdiveubquotnosol = 0.1

# maximal AVGQUOT when no solution was found yet
# [type: real, range: [0,1e+99], default: 8]
heuristics/fracdiving/maxdiveavgquotnosol = 8

# priority of heuristic <objpscostdiving>
# [type: int, range: [-2147483648,2147483647], default: -1003000]
heuristics/objpscostdiving/priority = -1003000

# frequency for calling primal heuristic <objpscostdiving> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 10]
heuristics/objpscostdiving/freq = 10

# frequency offset for calling primal heuristic <objpscostdiving>
# [type: int, range: [0,2147483647], default: 6]
heuristics/objpscostdiving/freqofs = 6

# maximal depth level to call primal heuristic <objpscostdiving> (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
heuristics/objpscostdiving/maxdepth = -1

# minimal relative depth to start diving
# [type: real, range: [0,1], default: 0.5]
heuristics/objpscostdiving/divestartdepth = 0.5

# maximal fraction of diving LP iterations compared to total iteration number
# [type: real, range: [0,1], default: 0.1]
heuristics/objpscostdiving/maxlpiterquot = 0.1

# maximal diving depth: number of binary/integer variables times depthfac
# [type: real, range: [0,1.79769313486232e+308], default: 0.5]
heuristics/objpscostdiving/depthfac = 0.5

# maximal diving depth factor if no feasible solution was found yet
# [type: real, range: [0,1.79769313486232e+308], default: 2]
heuristics/objpscostdiving/depthfacnosol = 2

# priority of heuristic <pscostdiving>
# [type: int, range: [-2147483648,2147483647], default: -1002000]
heuristics/pscostdiving/priority = -1002000

# frequency for calling primal heuristic <pscostdiving> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 10]
heuristics/pscostdiving/freq = 10

# frequency offset for calling primal heuristic <pscostdiving>
# [type: int, range: [0,2147483647], default: 4]
heuristics/pscostdiving/freqofs = 4

# maximal depth level to call primal heuristic <pscostdiving> (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
heuristics/pscostdiving/maxdepth = -1

# minimal relative depth to start diving
# [type: real, range: [0,1], default: 0.5]
heuristics/pscostdiving/divestartdepth = 0.5

# maximal fraction of diving LP iterations compared to total iteration number
# [type: real, range: [0,1], default: 0.1]
heuristics/pscostdiving/maxlpiterquot = 0.1

# maximal quotient (curlowerbound - lowerbound)/(upperbound - lowerbound) where diving is performed
# [type: real, range: [0,1], default: 0.8]
heuristics/pscostdiving/maxdiveubquot = 0.8

# maximal quotient (curlowerbound - lowerbound)/(avglowerbound - lowerbound) where diving is performed
# [type: real, range: [0,1e+99], default: 4]
heuristics/pscostdiving/maxdiveavgquot = 4

# maximal UBQUOT when no solution was found yet
# [type: real, range: [0,1], default: 0.1]
heuristics/pscostdiving/maxdiveubquotnosol = 0.1

# maximal AVGQUOT when no solution was found yet
# [type: real, range: [0,1e+99], default: 8]
heuristics/pscostdiving/maxdiveavgquotnosol = 8

# priority of heuristic <rounding>
# [type: int, range: [-2147483648,2147483647], default: -1000]
heuristics/rounding/priority = -1000

# frequency for calling primal heuristic <rounding> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
heuristics/rounding/freq = 1

# frequency offset for calling primal heuristic <rounding>
# [type: int, range: [0,2147483647], default: 0]
heuristics/rounding/freqofs = 0

# maximal depth level to call primal heuristic <rounding> (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
heuristics/rounding/maxdepth = -1

# priority of heuristic <simplerounding>
# [type: int, range: [-2147483648,2147483647], default: 0]
heuristics/simplerounding/priority = 0

# frequency for calling primal heuristic <simplerounding> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 1]
heuristics/simplerounding/freq = 1

# frequency offset for calling primal heuristic <simplerounding>
# [type: int, range: [0,2147483647], default: 0]
heuristics/simplerounding/freqofs = 0

# maximal depth level to call primal heuristic <simplerounding> (-1: no limit)
# [type: int, range: [-1,2147483647], default: -1]
heuristics/simplerounding/maxdepth = -1

# priority of separator <gomory>
# [type: int, range: [-2147483648,2147483647], default: 0]
separating/gomory/priority = 0

# frequency for calling separator <gomory> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: 10]
separating/gomory/freq = 10

# maximal number of gomory separation rounds per node
# [type: int, range: [0,2147483647], default: 3]
separating/gomory/maxrounds = 3

# maximal number of gomory separation rounds in the root node
# [type: int, range: [0,2147483647], default: 6]
separating/gomory/maxroundsroot = 6

# maximal number of gomory cuts separated per separation round
# [type: int, range: [0,2147483647], default: 25]
separating/gomory/maxsepacuts = 25

# maximal number of gomory cuts separated per separation round in the root node
# [type: int, range: [0,2147483647], default: 100]
separating/gomory/maxsepacutsroot = 100

# should generated cuts be removed from the LP if they are no longer tight?
# [type: bool, range: {TRUE,FALSE}, default: FALSE]
separating/gomory/dynamiccuts = FALSE

# priority of separator <intobj>
# [type: int, range: [-2147483648,2147483647], default: -100]
separating/intobj/priority = -100

# frequency for calling separator <intobj> (-1: never, 0: only in root node)
# [type: int, range: [-1,2147483647], default: -1]
separating/intobj/freq = -1

# display activation status of display column <solfound> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/solfound/active = 1

# display activation status of display column <time> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/time/active = 1

# display activation status of display column <nnodes> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/nnodes/active = 1

# display activation status of display column <nodesleft> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/nodesleft/active = 1

# display activation status of display column <lpiterations> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/lpiterations/active = 1

# display activation status of display column <memused> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/memused/active = 1

# display activation status of display column <depth> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/depth/active = 1

# display activation status of display column <maxdepth> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/maxdepth/active = 1

# display activation status of display column <vars> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/vars/active = 1

# display activation status of display column <conss> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/conss/active = 1

# display activation status of display column <curconss> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/curconss/active = 1

# display activation status of display column <curcols> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/curcols/active = 1

# display activation status of display column <currows> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/currows/active = 1

# display activation status of display column <cuts> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/cuts/active = 1

# display activation status of display column <separounds> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/separounds/active = 1

# display activation status of display column <poolsize> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/poolsize/active = 1

# display activation status of display column <conflicts> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/conflicts/active = 1

# display activation status of display column <strongbranchs> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/strongbranchs/active = 1

# display activation status of display column <curdualbound> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/curdualbound/active = 1

# display activation status of display column <avgdualbound> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/avgdualbound/active = 1

# display activation status of display column <dualbound> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/dualbound/active = 1

# display activation status of display column <primalbound> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/primalbound/active = 1

# display activation status of display column <gap> (0: off, 1: auto, 2:on)
# [type: int, range: [0,2], default: 1]
display/gap/active = 1

